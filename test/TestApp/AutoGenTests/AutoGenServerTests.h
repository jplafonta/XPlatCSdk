#pragma once

#include "TestCase.h"
#include <playfab/PlayFabGlobal.h>
#include <playfab/PlayFabEntity.h>
#include <playfab/PlayFabClientDataModels.h>
#include "../../../code/source/Client/ServerDataModels.h"

namespace PlayFabUnit
{

class AutoGenServerTests : public PlayFabApiTestCase
{
private: 
    static void Log(std::stringstream& ss);
    static HRESULT LogHR(HRESULT hr);
    void TestServerAddCharacterVirtualCurrency(TestContext& testContext); 
    void TestServerAddFriend(TestContext& testContext); 
    void TestServerAddGenericID(TestContext& testContext); 
    void TestServerAddPlayerTag(TestContext& testContext); 
    void TestServerAddSharedGroupMembers(TestContext& testContext); 
    void TestServerAddUserVirtualCurrency(TestContext& testContext); 
    void TestServerAuthenticateSessionTicket(TestContext& testContext); 
    void TestServerAwardSteamAchievement(TestContext& testContext); 
    void TestServerBanUsers(TestContext& testContext); 
    void TestServerConsumeItem(TestContext& testContext); 
    void TestServerCreateSharedGroup(TestContext& testContext); 
    void TestServerDeleteCharacterFromUser(TestContext& testContext); 
    void TestServerDeletePlayer(TestContext& testContext); 
    void TestServerDeletePushNotificationTemplate(TestContext& testContext); 
    void TestServerDeleteSharedGroup(TestContext& testContext); 
    void TestServerDeregisterGame(TestContext& testContext); 
    void TestServerEvaluateRandomResultTable(TestContext& testContext); 
    void TestServerExecuteCloudScript(TestContext& testContext); 
    void TestServerGetAllSegments(TestContext& testContext); 
    void TestServerGetAllUsersCharacters(TestContext& testContext); 
    void TestServerGetCatalogItems(TestContext& testContext); 
    void TestServerGetCharacterData(TestContext& testContext); 
    void TestServerGetCharacterInternalData(TestContext& testContext); 
    void TestServerGetCharacterInventory(TestContext& testContext); 
    void TestServerGetCharacterLeaderboard(TestContext& testContext); 
    void TestServerGetCharacterReadOnlyData(TestContext& testContext); 
    void TestServerGetCharacterStatistics(TestContext& testContext); 
    void TestServerGetContentDownloadUrl(TestContext& testContext); 
    void TestServerGetFriendLeaderboard(TestContext& testContext); 
    void TestServerGetFriendsList(TestContext& testContext); 
    void TestServerGetLeaderboard(TestContext& testContext); 
    void TestServerGetLeaderboardAroundCharacter(TestContext& testContext); 
    void TestServerGetLeaderboardAroundUser(TestContext& testContext); 
    void TestServerGetLeaderboardForUserCharacters(TestContext& testContext); 
    void TestServerGetPlayerCombinedInfo(TestContext& testContext); 
    void TestServerGetPlayerProfile(TestContext& testContext); 
    void TestServerGetPlayerSegments(TestContext& testContext); 
    void TestServerGetPlayersInSegment(TestContext& testContext); 
    void TestServerGetPlayerStatistics(TestContext& testContext); 
    void TestServerGetPlayerStatisticVersions(TestContext& testContext); 
    void TestServerGetPlayerTags(TestContext& testContext); 
    void TestServerGetPlayFabIDsFromFacebookIDs(TestContext& testContext); 
    void TestServerGetPlayFabIDsFromFacebookInstantGamesIds(TestContext& testContext); 
    void TestServerGetPlayFabIDsFromGenericIDs(TestContext& testContext); 
    void TestServerGetPlayFabIDsFromNintendoSwitchDeviceIds(TestContext& testContext); 
    void TestServerGetPlayFabIDsFromPSNAccountIDs(TestContext& testContext); 
    void TestServerGetPlayFabIDsFromSteamIDs(TestContext& testContext); 
    void TestServerGetPlayFabIDsFromXboxLiveIDs(TestContext& testContext); 
    void TestServerGetPublisherData(TestContext& testContext); 
    void TestServerGetRandomResultTables(TestContext& testContext); 
    void TestServerGetServerCustomIDsFromPlayFabIDs(TestContext& testContext); 
    void TestServerGetSharedGroupData(TestContext& testContext); 
    void TestServerGetStoreItems(TestContext& testContext); 
    void TestServerGetTime(TestContext& testContext); 
    void TestServerGetTitleData(TestContext& testContext); 
    void TestServerGetTitleInternalData(TestContext& testContext); 
    void TestServerGetTitleNews(TestContext& testContext); 
    void TestServerGetUserAccountInfo(TestContext& testContext); 
    void TestServerGetUserBans(TestContext& testContext); 
    void TestServerGetUserData(TestContext& testContext); 
    void TestServerGetUserInternalData(TestContext& testContext); 
    void TestServerGetUserInventory(TestContext& testContext); 
    void TestServerGetUserPublisherData(TestContext& testContext); 
    void TestServerGetUserPublisherInternalData(TestContext& testContext); 
    void TestServerGetUserPublisherReadOnlyData(TestContext& testContext); 
    void TestServerGetUserReadOnlyData(TestContext& testContext); 
    void TestServerGrantCharacterToUser(TestContext& testContext); 
    void TestServerGrantItemsToCharacter(TestContext& testContext); 
    void TestServerGrantItemsToUser(TestContext& testContext); 
    void TestServerGrantItemsToUsers(TestContext& testContext); 
    void TestServerLinkPSNAccount(TestContext& testContext); 
    void TestServerLinkServerCustomId(TestContext& testContext); 
    void TestServerLinkXboxAccount(TestContext& testContext); 
    void TestServerModifyItemUses(TestContext& testContext); 
    void TestServerMoveItemToCharacterFromCharacter(TestContext& testContext); 
    void TestServerMoveItemToCharacterFromUser(TestContext& testContext); 
    void TestServerMoveItemToUserFromCharacter(TestContext& testContext); 
    void TestServerNotifyMatchmakerPlayerLeft(TestContext& testContext); 
    void TestServerRedeemCoupon(TestContext& testContext); 
    void TestServerRedeemMatchmakerTicket(TestContext& testContext); 
    void TestServerRefreshGameServerInstanceHeartbeat(TestContext& testContext); 
    void TestServerRegisterGame(TestContext& testContext); 
    void TestServerRemoveFriend(TestContext& testContext); 
    void TestServerRemoveGenericID(TestContext& testContext); 
    void TestServerRemovePlayerTag(TestContext& testContext); 
    void TestServerRemoveSharedGroupMembers(TestContext& testContext); 
    void TestServerReportPlayer(TestContext& testContext); 
    void TestServerRevokeAllBansForUser(TestContext& testContext); 
    void TestServerRevokeBans(TestContext& testContext); 
    void TestServerRevokeInventoryItem(TestContext& testContext); 
    void TestServerRevokeInventoryItems(TestContext& testContext); 
    void TestServerSavePushNotificationTemplate(TestContext& testContext); 
    void TestServerSendCustomAccountRecoveryEmail(TestContext& testContext); 
    void TestServerSendEmailFromTemplate(TestContext& testContext); 
    void TestServerSendPushNotification(TestContext& testContext); 
    void TestServerSendPushNotificationFromTemplate(TestContext& testContext); 
    void TestServerSetFriendTags(TestContext& testContext); 
    void TestServerSetGameServerInstanceData(TestContext& testContext); 
    void TestServerSetGameServerInstanceState(TestContext& testContext); 
    void TestServerSetGameServerInstanceTags(TestContext& testContext); 
    void TestServerSetPlayerSecret(TestContext& testContext); 
    void TestServerSetPublisherData(TestContext& testContext); 
    void TestServerSetTitleData(TestContext& testContext); 
    void TestServerSetTitleInternalData(TestContext& testContext); 
    void TestServerSubtractCharacterVirtualCurrency(TestContext& testContext); 
    void TestServerSubtractUserVirtualCurrency(TestContext& testContext); 
    void TestServerUnlinkPSNAccount(TestContext& testContext); 
    void TestServerUnlinkServerCustomId(TestContext& testContext); 
    void TestServerUnlinkXboxAccount(TestContext& testContext); 
    void TestServerUnlockContainerInstance(TestContext& testContext); 
    void TestServerUnlockContainerItem(TestContext& testContext); 
    void TestServerUpdateAvatarUrl(TestContext& testContext); 
    void TestServerUpdateBans(TestContext& testContext); 
    void TestServerUpdateCharacterData(TestContext& testContext); 
    void TestServerUpdateCharacterInternalData(TestContext& testContext); 
    void TestServerUpdateCharacterReadOnlyData(TestContext& testContext); 
    void TestServerUpdateCharacterStatistics(TestContext& testContext); 
    void TestServerUpdatePlayerStatistics(TestContext& testContext); 
    void TestServerUpdateSharedGroupData(TestContext& testContext); 
    void TestServerUpdateUserData(TestContext& testContext); 
    void TestServerUpdateUserInternalData(TestContext& testContext); 
    void TestServerUpdateUserInventoryItemCustomData(TestContext& testContext); 
    void TestServerUpdateUserPublisherData(TestContext& testContext); 
    void TestServerUpdateUserPublisherInternalData(TestContext& testContext); 
    void TestServerUpdateUserPublisherReadOnlyData(TestContext& testContext); 
    void TestServerUpdateUserReadOnlyData(TestContext& testContext); 
    void TestServerWriteCharacterEvent(TestContext& testContext); 
    void TestServerWritePlayerEvent(TestContext& testContext); 
    void TestServerWriteTitleEvent(TestContext& testContext); 


protected:
    void AddTests();

    static void LogPlayFabServerAddCharacterVirtualCurrencyRequest( PlayFab::ServerModels::AddCharacterVirtualCurrencyRequest* request, const char* testName );
    static void FillPlayFabServerAddCharacterVirtualCurrencyRequest( PlayFab::ServerModels::AddCharacterVirtualCurrencyRequest* request );
    static HRESULT LogPlayFabServerModifyCharacterVirtualCurrencyResult( PlayFabServerModifyCharacterVirtualCurrencyResult* result );
    static HRESULT ValidatePlayFabServerModifyCharacterVirtualCurrencyResult( PlayFabServerModifyCharacterVirtualCurrencyResult* result );
    static void LogPlayFabServerAddFriendRequest( PlayFab::ServerModels::AddFriendRequest* request, const char* testName );
    static void FillPlayFabServerAddFriendRequest( PlayFab::ServerModels::AddFriendRequest* request );
    static void LogPlayFabServerAddGenericIDRequest( PlayFab::ServerModels::AddGenericIDRequest* request, const char* testName );
    static void FillPlayFabServerAddGenericIDRequest( PlayFab::ServerModels::AddGenericIDRequest* request );
    static void LogPlayFabServerAddPlayerTagRequest( PlayFab::ServerModels::AddPlayerTagRequest* request, const char* testName );
    static void FillPlayFabServerAddPlayerTagRequest( PlayFab::ServerModels::AddPlayerTagRequest* request );
    static void LogPlayFabServerAddSharedGroupMembersRequest( PlayFab::ServerModels::AddSharedGroupMembersRequest* request, const char* testName );
    static void FillPlayFabServerAddSharedGroupMembersRequest( PlayFab::ServerModels::AddSharedGroupMembersRequest* request );
    static void LogPlayFabServerAddUserVirtualCurrencyRequest( PlayFab::ServerModels::AddUserVirtualCurrencyRequest* request, const char* testName );
    static void FillPlayFabServerAddUserVirtualCurrencyRequest( PlayFab::ServerModels::AddUserVirtualCurrencyRequest* request );
    static HRESULT LogPlayFabServerModifyUserVirtualCurrencyResult( PlayFabServerModifyUserVirtualCurrencyResult* result );
    static HRESULT ValidatePlayFabServerModifyUserVirtualCurrencyResult( PlayFabServerModifyUserVirtualCurrencyResult* result );
    static void LogPlayFabServerAuthenticateSessionTicketRequest( PlayFab::ServerModels::AuthenticateSessionTicketRequest* request, const char* testName );
    static void FillPlayFabServerAuthenticateSessionTicketRequest( PlayFab::ServerModels::AuthenticateSessionTicketRequest* request );
    static HRESULT LogPlayFabServerAuthenticateSessionTicketResult( PlayFabServerAuthenticateSessionTicketResult* result );
    static HRESULT ValidatePlayFabServerAuthenticateSessionTicketResult( PlayFabServerAuthenticateSessionTicketResult* result );
    static void LogPlayFabServerAwardSteamAchievementRequest( PlayFab::ServerModels::AwardSteamAchievementRequest* request, const char* testName );
    static void FillPlayFabServerAwardSteamAchievementRequest( PlayFab::ServerModels::AwardSteamAchievementRequest* request );
    static HRESULT LogPlayFabServerAwardSteamAchievementResult( PlayFabServerAwardSteamAchievementResult* result );
    static HRESULT ValidatePlayFabServerAwardSteamAchievementResult( PlayFabServerAwardSteamAchievementResult* result );
    static void LogPlayFabServerBanUsersRequest( PlayFab::ServerModels::BanUsersRequest* request, const char* testName );
    static void FillPlayFabServerBanUsersRequest( PlayFab::ServerModels::BanUsersRequest* request );
    static HRESULT LogPlayFabServerBanUsersResult( PlayFabServerBanUsersResult* result );
    static HRESULT ValidatePlayFabServerBanUsersResult( PlayFabServerBanUsersResult* result );
    static void LogPlayFabServerConsumeItemRequest( PlayFab::ServerModels::ConsumeItemRequest* request, const char* testName );
    static void FillPlayFabServerConsumeItemRequest( PlayFab::ServerModels::ConsumeItemRequest* request );
    static HRESULT LogPlayFabServerConsumeItemResult( PlayFabServerConsumeItemResult* result );
    static HRESULT ValidatePlayFabServerConsumeItemResult( PlayFabServerConsumeItemResult* result );
    static void LogPlayFabServerCreateSharedGroupRequest( PlayFab::ServerModels::CreateSharedGroupRequest* request, const char* testName );
    static void FillPlayFabServerCreateSharedGroupRequest( PlayFab::ServerModels::CreateSharedGroupRequest* request );
    static HRESULT LogPlayFabServerCreateSharedGroupResult( PlayFabServerCreateSharedGroupResult* result );
    static HRESULT ValidatePlayFabServerCreateSharedGroupResult( PlayFabServerCreateSharedGroupResult* result );
    static void LogPlayFabServerDeleteCharacterFromUserRequest( PlayFab::ServerModels::DeleteCharacterFromUserRequest* request, const char* testName );
    static void FillPlayFabServerDeleteCharacterFromUserRequest( PlayFab::ServerModels::DeleteCharacterFromUserRequest* request );
    static void LogPlayFabServerDeletePlayerRequest( PlayFab::ServerModels::DeletePlayerRequest* request, const char* testName );
    static void FillPlayFabServerDeletePlayerRequest( PlayFab::ServerModels::DeletePlayerRequest* request );
    static void LogPlayFabServerDeletePushNotificationTemplateRequest( PlayFab::ServerModels::DeletePushNotificationTemplateRequest* request, const char* testName );
    static void FillPlayFabServerDeletePushNotificationTemplateRequest( PlayFab::ServerModels::DeletePushNotificationTemplateRequest* request );
    static void LogPlayFabServerDeleteSharedGroupRequest( PlayFab::ServerModels::DeleteSharedGroupRequest* request, const char* testName );
    static void FillPlayFabServerDeleteSharedGroupRequest( PlayFab::ServerModels::DeleteSharedGroupRequest* request );
    static void LogPlayFabServerDeregisterGameRequest( PlayFab::ServerModels::DeregisterGameRequest* request, const char* testName );
    static void FillPlayFabServerDeregisterGameRequest( PlayFab::ServerModels::DeregisterGameRequest* request );
    static void LogPlayFabServerEvaluateRandomResultTableRequest( PlayFab::ServerModels::EvaluateRandomResultTableRequest* request, const char* testName );
    static void FillPlayFabServerEvaluateRandomResultTableRequest( PlayFab::ServerModels::EvaluateRandomResultTableRequest* request );
    static HRESULT LogPlayFabServerEvaluateRandomResultTableResult( PlayFabServerEvaluateRandomResultTableResult* result );
    static HRESULT ValidatePlayFabServerEvaluateRandomResultTableResult( PlayFabServerEvaluateRandomResultTableResult* result );
    static void LogPlayFabServerExecuteCloudScriptServerRequest( PlayFab::ServerModels::ExecuteCloudScriptServerRequest* request, const char* testName );
    static void FillPlayFabServerExecuteCloudScriptServerRequest( PlayFab::ServerModels::ExecuteCloudScriptServerRequest* request );
    static HRESULT LogPlayFabServerExecuteCloudScriptResult( PlayFabServerExecuteCloudScriptResult* result );
    static HRESULT ValidatePlayFabServerExecuteCloudScriptResult( PlayFabServerExecuteCloudScriptResult* result );
    static HRESULT LogPlayFabServerGetAllSegmentsResult( PlayFabServerGetAllSegmentsResult* result );
    static HRESULT ValidatePlayFabServerGetAllSegmentsResult( PlayFabServerGetAllSegmentsResult* result );
    static void LogPlayFabServerListUsersCharactersRequest( PlayFab::ServerModels::ListUsersCharactersRequest* request, const char* testName );
    static void FillPlayFabServerListUsersCharactersRequest( PlayFab::ServerModels::ListUsersCharactersRequest* request );
    static HRESULT LogPlayFabServerListUsersCharactersResult( PlayFabServerListUsersCharactersResult* result );
    static HRESULT ValidatePlayFabServerListUsersCharactersResult( PlayFabServerListUsersCharactersResult* result );
    static void LogPlayFabServerGetCatalogItemsRequest( PlayFab::ServerModels::GetCatalogItemsRequest* request, const char* testName );
    static void FillPlayFabServerGetCatalogItemsRequest( PlayFab::ServerModels::GetCatalogItemsRequest* request );
    static HRESULT LogPlayFabServerGetCatalogItemsResult( PlayFabServerGetCatalogItemsResult* result );
    static HRESULT ValidatePlayFabServerGetCatalogItemsResult( PlayFabServerGetCatalogItemsResult* result );
    static void LogPlayFabServerGetCharacterDataRequest( PlayFab::ServerModels::GetCharacterDataRequest* request, const char* testName );
    static void FillPlayFabServerGetCharacterDataRequest( PlayFab::ServerModels::GetCharacterDataRequest* request );
    static HRESULT LogPlayFabServerGetCharacterDataResult( PlayFabServerGetCharacterDataResult* result );
    static HRESULT ValidatePlayFabServerGetCharacterDataResult( PlayFabServerGetCharacterDataResult* result );
    static void LogPlayFabServerGetCharacterInventoryRequest( PlayFab::ServerModels::GetCharacterInventoryRequest* request, const char* testName );
    static void FillPlayFabServerGetCharacterInventoryRequest( PlayFab::ServerModels::GetCharacterInventoryRequest* request );
    static HRESULT LogPlayFabServerGetCharacterInventoryResult( PlayFabServerGetCharacterInventoryResult* result );
    static HRESULT ValidatePlayFabServerGetCharacterInventoryResult( PlayFabServerGetCharacterInventoryResult* result );
    static void LogPlayFabServerGetCharacterLeaderboardRequest( PlayFab::ServerModels::GetCharacterLeaderboardRequest* request, const char* testName );
    static void FillPlayFabServerGetCharacterLeaderboardRequest( PlayFab::ServerModels::GetCharacterLeaderboardRequest* request );
    static HRESULT LogPlayFabServerGetCharacterLeaderboardResult( PlayFabServerGetCharacterLeaderboardResult* result );
    static HRESULT ValidatePlayFabServerGetCharacterLeaderboardResult( PlayFabServerGetCharacterLeaderboardResult* result );
    static void LogPlayFabServerGetCharacterStatisticsRequest( PlayFab::ServerModels::GetCharacterStatisticsRequest* request, const char* testName );
    static void FillPlayFabServerGetCharacterStatisticsRequest( PlayFab::ServerModels::GetCharacterStatisticsRequest* request );
    static HRESULT LogPlayFabServerGetCharacterStatisticsResult( PlayFabServerGetCharacterStatisticsResult* result );
    static HRESULT ValidatePlayFabServerGetCharacterStatisticsResult( PlayFabServerGetCharacterStatisticsResult* result );
    static void LogPlayFabServerGetContentDownloadUrlRequest( PlayFab::ServerModels::GetContentDownloadUrlRequest* request, const char* testName );
    static void FillPlayFabServerGetContentDownloadUrlRequest( PlayFab::ServerModels::GetContentDownloadUrlRequest* request );
    static HRESULT LogPlayFabServerGetContentDownloadUrlResult( PlayFabServerGetContentDownloadUrlResult* result );
    static HRESULT ValidatePlayFabServerGetContentDownloadUrlResult( PlayFabServerGetContentDownloadUrlResult* result );
    static void LogPlayFabServerGetFriendLeaderboardRequest( PlayFab::ServerModels::GetFriendLeaderboardRequest* request, const char* testName );
    static void FillPlayFabServerGetFriendLeaderboardRequest( PlayFab::ServerModels::GetFriendLeaderboardRequest* request );
    static HRESULT LogPlayFabServerGetLeaderboardResult( PlayFabServerGetLeaderboardResult* result );
    static HRESULT ValidatePlayFabServerGetLeaderboardResult( PlayFabServerGetLeaderboardResult* result );
    static void LogPlayFabServerGetFriendsListRequest( PlayFab::ServerModels::GetFriendsListRequest* request, const char* testName );
    static void FillPlayFabServerGetFriendsListRequest( PlayFab::ServerModels::GetFriendsListRequest* request );
    static HRESULT LogPlayFabServerGetFriendsListResult( PlayFabServerGetFriendsListResult* result );
    static HRESULT ValidatePlayFabServerGetFriendsListResult( PlayFabServerGetFriendsListResult* result );
    static void LogPlayFabServerGetLeaderboardRequest( PlayFab::ServerModels::GetLeaderboardRequest* request, const char* testName );
    static void FillPlayFabServerGetLeaderboardRequest( PlayFab::ServerModels::GetLeaderboardRequest* request );
    static void LogPlayFabServerGetLeaderboardAroundCharacterRequest( PlayFab::ServerModels::GetLeaderboardAroundCharacterRequest* request, const char* testName );
    static void FillPlayFabServerGetLeaderboardAroundCharacterRequest( PlayFab::ServerModels::GetLeaderboardAroundCharacterRequest* request );
    static HRESULT LogPlayFabServerGetLeaderboardAroundCharacterResult( PlayFabServerGetLeaderboardAroundCharacterResult* result );
    static HRESULT ValidatePlayFabServerGetLeaderboardAroundCharacterResult( PlayFabServerGetLeaderboardAroundCharacterResult* result );
    static void LogPlayFabServerGetLeaderboardAroundUserRequest( PlayFab::ServerModels::GetLeaderboardAroundUserRequest* request, const char* testName );
    static void FillPlayFabServerGetLeaderboardAroundUserRequest( PlayFab::ServerModels::GetLeaderboardAroundUserRequest* request );
    static HRESULT LogPlayFabServerGetLeaderboardAroundUserResult( PlayFabServerGetLeaderboardAroundUserResult* result );
    static HRESULT ValidatePlayFabServerGetLeaderboardAroundUserResult( PlayFabServerGetLeaderboardAroundUserResult* result );
    static void LogPlayFabServerGetLeaderboardForUsersCharactersRequest( PlayFab::ServerModels::GetLeaderboardForUsersCharactersRequest* request, const char* testName );
    static void FillPlayFabServerGetLeaderboardForUsersCharactersRequest( PlayFab::ServerModels::GetLeaderboardForUsersCharactersRequest* request );
    static HRESULT LogPlayFabServerGetLeaderboardForUsersCharactersResult( PlayFabServerGetLeaderboardForUsersCharactersResult* result );
    static HRESULT ValidatePlayFabServerGetLeaderboardForUsersCharactersResult( PlayFabServerGetLeaderboardForUsersCharactersResult* result );
    static void LogPlayFabServerGetPlayerCombinedInfoRequest( PlayFab::ServerModels::GetPlayerCombinedInfoRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayerCombinedInfoRequest( PlayFab::ServerModels::GetPlayerCombinedInfoRequest* request );
    static HRESULT LogPlayFabServerGetPlayerCombinedInfoResult( PlayFabServerGetPlayerCombinedInfoResult* result );
    static HRESULT ValidatePlayFabServerGetPlayerCombinedInfoResult( PlayFabServerGetPlayerCombinedInfoResult* result );
    static void LogPlayFabServerGetPlayerProfileRequest( PlayFab::ServerModels::GetPlayerProfileRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayerProfileRequest( PlayFab::ServerModels::GetPlayerProfileRequest* request );
    static HRESULT LogPlayFabServerGetPlayerProfileResult( PlayFabServerGetPlayerProfileResult* result );
    static HRESULT ValidatePlayFabServerGetPlayerProfileResult( PlayFabServerGetPlayerProfileResult* result );
    static void LogPlayFabServerGetPlayersSegmentsRequest( PlayFab::ServerModels::GetPlayersSegmentsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayersSegmentsRequest( PlayFab::ServerModels::GetPlayersSegmentsRequest* request );
    static HRESULT LogPlayFabServerGetPlayerSegmentsResult( PlayFabServerGetPlayerSegmentsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayerSegmentsResult( PlayFabServerGetPlayerSegmentsResult* result );
    static void LogPlayFabServerGetPlayersInSegmentRequest( PlayFab::ServerModels::GetPlayersInSegmentRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayersInSegmentRequest( PlayFab::ServerModels::GetPlayersInSegmentRequest* request );
    static HRESULT LogPlayFabServerGetPlayersInSegmentResult( PlayFabServerGetPlayersInSegmentResult* result );
    static HRESULT ValidatePlayFabServerGetPlayersInSegmentResult( PlayFabServerGetPlayersInSegmentResult* result );
    static void LogPlayFabServerGetPlayerStatisticsRequest( PlayFab::ServerModels::GetPlayerStatisticsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayerStatisticsRequest( PlayFab::ServerModels::GetPlayerStatisticsRequest* request );
    static HRESULT LogPlayFabServerGetPlayerStatisticsResult( PlayFabServerGetPlayerStatisticsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayerStatisticsResult( PlayFabServerGetPlayerStatisticsResult* result );
    static void LogPlayFabServerGetPlayerStatisticVersionsRequest( PlayFab::ServerModels::GetPlayerStatisticVersionsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayerStatisticVersionsRequest( PlayFab::ServerModels::GetPlayerStatisticVersionsRequest* request );
    static HRESULT LogPlayFabServerGetPlayerStatisticVersionsResult( PlayFabServerGetPlayerStatisticVersionsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayerStatisticVersionsResult( PlayFabServerGetPlayerStatisticVersionsResult* result );
    static void LogPlayFabServerGetPlayerTagsRequest( PlayFab::ServerModels::GetPlayerTagsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayerTagsRequest( PlayFab::ServerModels::GetPlayerTagsRequest* request );
    static HRESULT LogPlayFabServerGetPlayerTagsResult( PlayFabServerGetPlayerTagsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayerTagsResult( PlayFabServerGetPlayerTagsResult* result );
    static void LogPlayFabServerGetPlayFabIDsFromFacebookIDsRequest( PlayFab::ServerModels::GetPlayFabIDsFromFacebookIDsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayFabIDsFromFacebookIDsRequest( PlayFab::ServerModels::GetPlayFabIDsFromFacebookIDsRequest* request );
    static HRESULT LogPlayFabServerGetPlayFabIDsFromFacebookIDsResult( PlayFabServerGetPlayFabIDsFromFacebookIDsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayFabIDsFromFacebookIDsResult( PlayFabServerGetPlayFabIDsFromFacebookIDsResult* result );
    static void LogPlayFabServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest( PlayFab::ServerModels::GetPlayFabIDsFromFacebookInstantGamesIdsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest( PlayFab::ServerModels::GetPlayFabIDsFromFacebookInstantGamesIdsRequest* request );
    static HRESULT LogPlayFabServerGetPlayFabIDsFromFacebookInstantGamesIdsResult( PlayFabServerGetPlayFabIDsFromFacebookInstantGamesIdsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayFabIDsFromFacebookInstantGamesIdsResult( PlayFabServerGetPlayFabIDsFromFacebookInstantGamesIdsResult* result );
    static void LogPlayFabServerGetPlayFabIDsFromGenericIDsRequest( PlayFab::ServerModels::GetPlayFabIDsFromGenericIDsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayFabIDsFromGenericIDsRequest( PlayFab::ServerModels::GetPlayFabIDsFromGenericIDsRequest* request );
    static HRESULT LogPlayFabServerGetPlayFabIDsFromGenericIDsResult( PlayFabServerGetPlayFabIDsFromGenericIDsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayFabIDsFromGenericIDsResult( PlayFabServerGetPlayFabIDsFromGenericIDsResult* result );
    static void LogPlayFabServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest( PlayFab::ServerModels::GetPlayFabIDsFromNintendoSwitchDeviceIdsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest( PlayFab::ServerModels::GetPlayFabIDsFromNintendoSwitchDeviceIdsRequest* request );
    static HRESULT LogPlayFabServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult( PlayFabServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult( PlayFabServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult* result );
    static void LogPlayFabServerGetPlayFabIDsFromPSNAccountIDsRequest( PlayFab::ServerModels::GetPlayFabIDsFromPSNAccountIDsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayFabIDsFromPSNAccountIDsRequest( PlayFab::ServerModels::GetPlayFabIDsFromPSNAccountIDsRequest* request );
    static HRESULT LogPlayFabServerGetPlayFabIDsFromPSNAccountIDsResult( PlayFabServerGetPlayFabIDsFromPSNAccountIDsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayFabIDsFromPSNAccountIDsResult( PlayFabServerGetPlayFabIDsFromPSNAccountIDsResult* result );
    static void LogPlayFabServerGetPlayFabIDsFromSteamIDsRequest( PlayFab::ServerModels::GetPlayFabIDsFromSteamIDsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayFabIDsFromSteamIDsRequest( PlayFab::ServerModels::GetPlayFabIDsFromSteamIDsRequest* request );
    static HRESULT LogPlayFabServerGetPlayFabIDsFromSteamIDsResult( PlayFabServerGetPlayFabIDsFromSteamIDsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayFabIDsFromSteamIDsResult( PlayFabServerGetPlayFabIDsFromSteamIDsResult* result );
    static void LogPlayFabServerGetPlayFabIDsFromXboxLiveIDsRequest( PlayFab::ServerModels::GetPlayFabIDsFromXboxLiveIDsRequest* request, const char* testName );
    static void FillPlayFabServerGetPlayFabIDsFromXboxLiveIDsRequest( PlayFab::ServerModels::GetPlayFabIDsFromXboxLiveIDsRequest* request );
    static HRESULT LogPlayFabServerGetPlayFabIDsFromXboxLiveIDsResult( PlayFabServerGetPlayFabIDsFromXboxLiveIDsResult* result );
    static HRESULT ValidatePlayFabServerGetPlayFabIDsFromXboxLiveIDsResult( PlayFabServerGetPlayFabIDsFromXboxLiveIDsResult* result );
    static void LogPlayFabServerGetPublisherDataRequest( PlayFab::ServerModels::GetPublisherDataRequest* request, const char* testName );
    static void FillPlayFabServerGetPublisherDataRequest( PlayFab::ServerModels::GetPublisherDataRequest* request );
    static HRESULT LogPlayFabServerGetPublisherDataResult( PlayFabServerGetPublisherDataResult* result );
    static HRESULT ValidatePlayFabServerGetPublisherDataResult( PlayFabServerGetPublisherDataResult* result );
    static void LogPlayFabServerGetRandomResultTablesRequest( PlayFab::ServerModels::GetRandomResultTablesRequest* request, const char* testName );
    static void FillPlayFabServerGetRandomResultTablesRequest( PlayFab::ServerModels::GetRandomResultTablesRequest* request );
    static HRESULT LogPlayFabServerGetRandomResultTablesResult( PlayFabServerGetRandomResultTablesResult* result );
    static HRESULT ValidatePlayFabServerGetRandomResultTablesResult( PlayFabServerGetRandomResultTablesResult* result );
    static void LogPlayFabServerGetServerCustomIDsFromPlayFabIDsRequest( PlayFab::ServerModels::GetServerCustomIDsFromPlayFabIDsRequest* request, const char* testName );
    static void FillPlayFabServerGetServerCustomIDsFromPlayFabIDsRequest( PlayFab::ServerModels::GetServerCustomIDsFromPlayFabIDsRequest* request );
    static HRESULT LogPlayFabServerGetServerCustomIDsFromPlayFabIDsResult( PlayFabServerGetServerCustomIDsFromPlayFabIDsResult* result );
    static HRESULT ValidatePlayFabServerGetServerCustomIDsFromPlayFabIDsResult( PlayFabServerGetServerCustomIDsFromPlayFabIDsResult* result );
    static void LogPlayFabServerGetSharedGroupDataRequest( PlayFab::ServerModels::GetSharedGroupDataRequest* request, const char* testName );
    static void FillPlayFabServerGetSharedGroupDataRequest( PlayFab::ServerModels::GetSharedGroupDataRequest* request );
    static HRESULT LogPlayFabServerGetSharedGroupDataResult( PlayFabServerGetSharedGroupDataResult* result );
    static HRESULT ValidatePlayFabServerGetSharedGroupDataResult( PlayFabServerGetSharedGroupDataResult* result );
    static void LogPlayFabServerGetStoreItemsServerRequest( PlayFab::ServerModels::GetStoreItemsServerRequest* request, const char* testName );
    static void FillPlayFabServerGetStoreItemsServerRequest( PlayFab::ServerModels::GetStoreItemsServerRequest* request );
    static HRESULT LogPlayFabServerGetStoreItemsResult( PlayFabServerGetStoreItemsResult* result );
    static HRESULT ValidatePlayFabServerGetStoreItemsResult( PlayFabServerGetStoreItemsResult* result );
    static HRESULT LogPlayFabServerGetTimeResult( PlayFabServerGetTimeResult* result );
    static HRESULT ValidatePlayFabServerGetTimeResult( PlayFabServerGetTimeResult* result );
    static void LogPlayFabServerGetTitleDataRequest( PlayFab::ServerModels::GetTitleDataRequest* request, const char* testName );
    static void FillPlayFabServerGetTitleDataRequest( PlayFab::ServerModels::GetTitleDataRequest* request );
    static HRESULT LogPlayFabServerGetTitleDataResult( PlayFabServerGetTitleDataResult* result );
    static HRESULT ValidatePlayFabServerGetTitleDataResult( PlayFabServerGetTitleDataResult* result );
    static void LogPlayFabServerGetTitleNewsRequest( PlayFab::ServerModels::GetTitleNewsRequest* request, const char* testName );
    static void FillPlayFabServerGetTitleNewsRequest( PlayFab::ServerModels::GetTitleNewsRequest* request );
    static HRESULT LogPlayFabServerGetTitleNewsResult( PlayFabServerGetTitleNewsResult* result );
    static HRESULT ValidatePlayFabServerGetTitleNewsResult( PlayFabServerGetTitleNewsResult* result );
    static void LogPlayFabServerGetUserAccountInfoRequest( PlayFab::ServerModels::GetUserAccountInfoRequest* request, const char* testName );
    static void FillPlayFabServerGetUserAccountInfoRequest( PlayFab::ServerModels::GetUserAccountInfoRequest* request );
    static HRESULT LogPlayFabServerGetUserAccountInfoResult( PlayFabServerGetUserAccountInfoResult* result );
    static HRESULT ValidatePlayFabServerGetUserAccountInfoResult( PlayFabServerGetUserAccountInfoResult* result );
    static void LogPlayFabServerGetUserBansRequest( PlayFab::ServerModels::GetUserBansRequest* request, const char* testName );
    static void FillPlayFabServerGetUserBansRequest( PlayFab::ServerModels::GetUserBansRequest* request );
    static HRESULT LogPlayFabServerGetUserBansResult( PlayFabServerGetUserBansResult* result );
    static HRESULT ValidatePlayFabServerGetUserBansResult( PlayFabServerGetUserBansResult* result );
    static void LogPlayFabServerGetUserDataRequest( PlayFab::ServerModels::GetUserDataRequest* request, const char* testName );
    static void FillPlayFabServerGetUserDataRequest( PlayFab::ServerModels::GetUserDataRequest* request );
    static HRESULT LogPlayFabServerGetUserDataResult( PlayFabServerGetUserDataResult* result );
    static HRESULT ValidatePlayFabServerGetUserDataResult( PlayFabServerGetUserDataResult* result );
    static void LogPlayFabServerGetUserInventoryRequest( PlayFab::ServerModels::GetUserInventoryRequest* request, const char* testName );
    static void FillPlayFabServerGetUserInventoryRequest( PlayFab::ServerModels::GetUserInventoryRequest* request );
    static HRESULT LogPlayFabServerGetUserInventoryResult( PlayFabServerGetUserInventoryResult* result );
    static HRESULT ValidatePlayFabServerGetUserInventoryResult( PlayFabServerGetUserInventoryResult* result );
    static void LogPlayFabServerGrantCharacterToUserRequest( PlayFab::ServerModels::GrantCharacterToUserRequest* request, const char* testName );
    static void FillPlayFabServerGrantCharacterToUserRequest( PlayFab::ServerModels::GrantCharacterToUserRequest* request );
    static HRESULT LogPlayFabServerGrantCharacterToUserResult( PlayFabServerGrantCharacterToUserResult* result );
    static HRESULT ValidatePlayFabServerGrantCharacterToUserResult( PlayFabServerGrantCharacterToUserResult* result );
    static void LogPlayFabServerGrantItemsToCharacterRequest( PlayFab::ServerModels::GrantItemsToCharacterRequest* request, const char* testName );
    static void FillPlayFabServerGrantItemsToCharacterRequest( PlayFab::ServerModels::GrantItemsToCharacterRequest* request );
    static HRESULT LogPlayFabServerGrantItemsToCharacterResult( PlayFabServerGrantItemsToCharacterResult* result );
    static HRESULT ValidatePlayFabServerGrantItemsToCharacterResult( PlayFabServerGrantItemsToCharacterResult* result );
    static void LogPlayFabServerGrantItemsToUserRequest( PlayFab::ServerModels::GrantItemsToUserRequest* request, const char* testName );
    static void FillPlayFabServerGrantItemsToUserRequest( PlayFab::ServerModels::GrantItemsToUserRequest* request );
    static HRESULT LogPlayFabServerGrantItemsToUserResult( PlayFabServerGrantItemsToUserResult* result );
    static HRESULT ValidatePlayFabServerGrantItemsToUserResult( PlayFabServerGrantItemsToUserResult* result );
    static void LogPlayFabServerGrantItemsToUsersRequest( PlayFab::ServerModels::GrantItemsToUsersRequest* request, const char* testName );
    static void FillPlayFabServerGrantItemsToUsersRequest( PlayFab::ServerModels::GrantItemsToUsersRequest* request );
    static HRESULT LogPlayFabServerGrantItemsToUsersResult( PlayFabServerGrantItemsToUsersResult* result );
    static HRESULT ValidatePlayFabServerGrantItemsToUsersResult( PlayFabServerGrantItemsToUsersResult* result );
    static void LogPlayFabServerLinkPSNAccountRequest( PlayFab::ServerModels::LinkPSNAccountRequest* request, const char* testName );
    static void FillPlayFabServerLinkPSNAccountRequest( PlayFab::ServerModels::LinkPSNAccountRequest* request );
    static void LogPlayFabServerLinkServerCustomIdRequest( PlayFab::ServerModels::LinkServerCustomIdRequest* request, const char* testName );
    static void FillPlayFabServerLinkServerCustomIdRequest( PlayFab::ServerModels::LinkServerCustomIdRequest* request );
    static void LogPlayFabServerLinkXboxAccountRequest( PlayFab::ServerModels::LinkXboxAccountRequest* request, const char* testName );
    static void FillPlayFabServerLinkXboxAccountRequest( PlayFab::ServerModels::LinkXboxAccountRequest* request );
    static void LogPlayFabServerModifyItemUsesRequest( PlayFab::ServerModels::ModifyItemUsesRequest* request, const char* testName );
    static void FillPlayFabServerModifyItemUsesRequest( PlayFab::ServerModels::ModifyItemUsesRequest* request );
    static HRESULT LogPlayFabServerModifyItemUsesResult( PlayFabServerModifyItemUsesResult* result );
    static HRESULT ValidatePlayFabServerModifyItemUsesResult( PlayFabServerModifyItemUsesResult* result );
    static void LogPlayFabServerMoveItemToCharacterFromCharacterRequest( PlayFab::ServerModels::MoveItemToCharacterFromCharacterRequest* request, const char* testName );
    static void FillPlayFabServerMoveItemToCharacterFromCharacterRequest( PlayFab::ServerModels::MoveItemToCharacterFromCharacterRequest* request );
    static void LogPlayFabServerMoveItemToCharacterFromUserRequest( PlayFab::ServerModels::MoveItemToCharacterFromUserRequest* request, const char* testName );
    static void FillPlayFabServerMoveItemToCharacterFromUserRequest( PlayFab::ServerModels::MoveItemToCharacterFromUserRequest* request );
    static void LogPlayFabServerMoveItemToUserFromCharacterRequest( PlayFab::ServerModels::MoveItemToUserFromCharacterRequest* request, const char* testName );
    static void FillPlayFabServerMoveItemToUserFromCharacterRequest( PlayFab::ServerModels::MoveItemToUserFromCharacterRequest* request );
    static void LogPlayFabServerNotifyMatchmakerPlayerLeftRequest( PlayFab::ServerModels::NotifyMatchmakerPlayerLeftRequest* request, const char* testName );
    static void FillPlayFabServerNotifyMatchmakerPlayerLeftRequest( PlayFab::ServerModels::NotifyMatchmakerPlayerLeftRequest* request );
    static HRESULT LogPlayFabServerNotifyMatchmakerPlayerLeftResult( PlayFabServerNotifyMatchmakerPlayerLeftResult* result );
    static HRESULT ValidatePlayFabServerNotifyMatchmakerPlayerLeftResult( PlayFabServerNotifyMatchmakerPlayerLeftResult* result );
    static void LogPlayFabServerRedeemCouponRequest( PlayFab::ServerModels::RedeemCouponRequest* request, const char* testName );
    static void FillPlayFabServerRedeemCouponRequest( PlayFab::ServerModels::RedeemCouponRequest* request );
    static HRESULT LogPlayFabServerRedeemCouponResult( PlayFabServerRedeemCouponResult* result );
    static HRESULT ValidatePlayFabServerRedeemCouponResult( PlayFabServerRedeemCouponResult* result );
    static void LogPlayFabServerRedeemMatchmakerTicketRequest( PlayFab::ServerModels::RedeemMatchmakerTicketRequest* request, const char* testName );
    static void FillPlayFabServerRedeemMatchmakerTicketRequest( PlayFab::ServerModels::RedeemMatchmakerTicketRequest* request );
    static HRESULT LogPlayFabServerRedeemMatchmakerTicketResult( PlayFabServerRedeemMatchmakerTicketResult* result );
    static HRESULT ValidatePlayFabServerRedeemMatchmakerTicketResult( PlayFabServerRedeemMatchmakerTicketResult* result );
    static void LogPlayFabServerRefreshGameServerInstanceHeartbeatRequest( PlayFab::ServerModels::RefreshGameServerInstanceHeartbeatRequest* request, const char* testName );
    static void FillPlayFabServerRefreshGameServerInstanceHeartbeatRequest( PlayFab::ServerModels::RefreshGameServerInstanceHeartbeatRequest* request );
    static void LogPlayFabServerRegisterGameRequest( PlayFab::ServerModels::RegisterGameRequest* request, const char* testName );
    static void FillPlayFabServerRegisterGameRequest( PlayFab::ServerModels::RegisterGameRequest* request );
    static HRESULT LogPlayFabServerRegisterGameResponse( PlayFabServerRegisterGameResponse* result );
    static HRESULT ValidatePlayFabServerRegisterGameResponse( PlayFabServerRegisterGameResponse* result );
    static void LogPlayFabServerRemoveFriendRequest( PlayFab::ServerModels::RemoveFriendRequest* request, const char* testName );
    static void FillPlayFabServerRemoveFriendRequest( PlayFab::ServerModels::RemoveFriendRequest* request );
    static void LogPlayFabServerRemoveGenericIDRequest( PlayFab::ServerModels::RemoveGenericIDRequest* request, const char* testName );
    static void FillPlayFabServerRemoveGenericIDRequest( PlayFab::ServerModels::RemoveGenericIDRequest* request );
    static void LogPlayFabServerRemovePlayerTagRequest( PlayFab::ServerModels::RemovePlayerTagRequest* request, const char* testName );
    static void FillPlayFabServerRemovePlayerTagRequest( PlayFab::ServerModels::RemovePlayerTagRequest* request );
    static void LogPlayFabServerRemoveSharedGroupMembersRequest( PlayFab::ServerModels::RemoveSharedGroupMembersRequest* request, const char* testName );
    static void FillPlayFabServerRemoveSharedGroupMembersRequest( PlayFab::ServerModels::RemoveSharedGroupMembersRequest* request );
    static void LogPlayFabServerReportPlayerServerRequest( PlayFab::ServerModels::ReportPlayerServerRequest* request, const char* testName );
    static void FillPlayFabServerReportPlayerServerRequest( PlayFab::ServerModels::ReportPlayerServerRequest* request );
    static HRESULT LogPlayFabServerReportPlayerServerResult( PlayFabServerReportPlayerServerResult* result );
    static HRESULT ValidatePlayFabServerReportPlayerServerResult( PlayFabServerReportPlayerServerResult* result );
    static void LogPlayFabServerRevokeAllBansForUserRequest( PlayFab::ServerModels::RevokeAllBansForUserRequest* request, const char* testName );
    static void FillPlayFabServerRevokeAllBansForUserRequest( PlayFab::ServerModels::RevokeAllBansForUserRequest* request );
    static HRESULT LogPlayFabServerRevokeAllBansForUserResult( PlayFabServerRevokeAllBansForUserResult* result );
    static HRESULT ValidatePlayFabServerRevokeAllBansForUserResult( PlayFabServerRevokeAllBansForUserResult* result );
    static void LogPlayFabServerRevokeBansRequest( PlayFab::ServerModels::RevokeBansRequest* request, const char* testName );
    static void FillPlayFabServerRevokeBansRequest( PlayFab::ServerModels::RevokeBansRequest* request );
    static HRESULT LogPlayFabServerRevokeBansResult( PlayFabServerRevokeBansResult* result );
    static HRESULT ValidatePlayFabServerRevokeBansResult( PlayFabServerRevokeBansResult* result );
    static void LogPlayFabServerRevokeInventoryItemRequest( PlayFab::ServerModels::RevokeInventoryItemRequest* request, const char* testName );
    static void FillPlayFabServerRevokeInventoryItemRequest( PlayFab::ServerModels::RevokeInventoryItemRequest* request );
    static void LogPlayFabServerRevokeInventoryItemsRequest( PlayFab::ServerModels::RevokeInventoryItemsRequest* request, const char* testName );
    static void FillPlayFabServerRevokeInventoryItemsRequest( PlayFab::ServerModels::RevokeInventoryItemsRequest* request );
    static HRESULT LogPlayFabServerRevokeInventoryItemsResult( PlayFabServerRevokeInventoryItemsResult* result );
    static HRESULT ValidatePlayFabServerRevokeInventoryItemsResult( PlayFabServerRevokeInventoryItemsResult* result );
    static void LogPlayFabServerSavePushNotificationTemplateRequest( PlayFab::ServerModels::SavePushNotificationTemplateRequest* request, const char* testName );
    static void FillPlayFabServerSavePushNotificationTemplateRequest( PlayFab::ServerModels::SavePushNotificationTemplateRequest* request );
    static HRESULT LogPlayFabServerSavePushNotificationTemplateResult( PlayFabServerSavePushNotificationTemplateResult* result );
    static HRESULT ValidatePlayFabServerSavePushNotificationTemplateResult( PlayFabServerSavePushNotificationTemplateResult* result );
    static void LogPlayFabServerSendCustomAccountRecoveryEmailRequest( PlayFab::ServerModels::SendCustomAccountRecoveryEmailRequest* request, const char* testName );
    static void FillPlayFabServerSendCustomAccountRecoveryEmailRequest( PlayFab::ServerModels::SendCustomAccountRecoveryEmailRequest* request );
    static void LogPlayFabServerSendEmailFromTemplateRequest( PlayFab::ServerModels::SendEmailFromTemplateRequest* request, const char* testName );
    static void FillPlayFabServerSendEmailFromTemplateRequest( PlayFab::ServerModels::SendEmailFromTemplateRequest* request );
    static void LogPlayFabServerSendPushNotificationRequest( PlayFab::ServerModels::SendPushNotificationRequest* request, const char* testName );
    static void FillPlayFabServerSendPushNotificationRequest( PlayFab::ServerModels::SendPushNotificationRequest* request );
    static void LogPlayFabServerSendPushNotificationFromTemplateRequest( PlayFab::ServerModels::SendPushNotificationFromTemplateRequest* request, const char* testName );
    static void FillPlayFabServerSendPushNotificationFromTemplateRequest( PlayFab::ServerModels::SendPushNotificationFromTemplateRequest* request );
    static void LogPlayFabServerSetFriendTagsRequest( PlayFab::ServerModels::SetFriendTagsRequest* request, const char* testName );
    static void FillPlayFabServerSetFriendTagsRequest( PlayFab::ServerModels::SetFriendTagsRequest* request );
    static void LogPlayFabServerSetGameServerInstanceDataRequest( PlayFab::ServerModels::SetGameServerInstanceDataRequest* request, const char* testName );
    static void FillPlayFabServerSetGameServerInstanceDataRequest( PlayFab::ServerModels::SetGameServerInstanceDataRequest* request );
    static void LogPlayFabServerSetGameServerInstanceStateRequest( PlayFab::ServerModels::SetGameServerInstanceStateRequest* request, const char* testName );
    static void FillPlayFabServerSetGameServerInstanceStateRequest( PlayFab::ServerModels::SetGameServerInstanceStateRequest* request );
    static void LogPlayFabServerSetGameServerInstanceTagsRequest( PlayFab::ServerModels::SetGameServerInstanceTagsRequest* request, const char* testName );
    static void FillPlayFabServerSetGameServerInstanceTagsRequest( PlayFab::ServerModels::SetGameServerInstanceTagsRequest* request );
    static void LogPlayFabServerSetPlayerSecretRequest( PlayFab::ServerModels::SetPlayerSecretRequest* request, const char* testName );
    static void FillPlayFabServerSetPlayerSecretRequest( PlayFab::ServerModels::SetPlayerSecretRequest* request );
    static void LogPlayFabServerSetPublisherDataRequest( PlayFab::ServerModels::SetPublisherDataRequest* request, const char* testName );
    static void FillPlayFabServerSetPublisherDataRequest( PlayFab::ServerModels::SetPublisherDataRequest* request );
    static void LogPlayFabServerSetTitleDataRequest( PlayFab::ServerModels::SetTitleDataRequest* request, const char* testName );
    static void FillPlayFabServerSetTitleDataRequest( PlayFab::ServerModels::SetTitleDataRequest* request );
    static void LogPlayFabServerSubtractCharacterVirtualCurrencyRequest( PlayFab::ServerModels::SubtractCharacterVirtualCurrencyRequest* request, const char* testName );
    static void FillPlayFabServerSubtractCharacterVirtualCurrencyRequest( PlayFab::ServerModels::SubtractCharacterVirtualCurrencyRequest* request );
    static void LogPlayFabServerSubtractUserVirtualCurrencyRequest( PlayFab::ServerModels::SubtractUserVirtualCurrencyRequest* request, const char* testName );
    static void FillPlayFabServerSubtractUserVirtualCurrencyRequest( PlayFab::ServerModels::SubtractUserVirtualCurrencyRequest* request );
    static void LogPlayFabServerUnlinkPSNAccountRequest( PlayFab::ServerModels::UnlinkPSNAccountRequest* request, const char* testName );
    static void FillPlayFabServerUnlinkPSNAccountRequest( PlayFab::ServerModels::UnlinkPSNAccountRequest* request );
    static void LogPlayFabServerUnlinkServerCustomIdRequest( PlayFab::ServerModels::UnlinkServerCustomIdRequest* request, const char* testName );
    static void FillPlayFabServerUnlinkServerCustomIdRequest( PlayFab::ServerModels::UnlinkServerCustomIdRequest* request );
    static void LogPlayFabServerUnlinkXboxAccountRequest( PlayFab::ServerModels::UnlinkXboxAccountRequest* request, const char* testName );
    static void FillPlayFabServerUnlinkXboxAccountRequest( PlayFab::ServerModels::UnlinkXboxAccountRequest* request );
    static void LogPlayFabServerUnlockContainerInstanceRequest( PlayFab::ServerModels::UnlockContainerInstanceRequest* request, const char* testName );
    static void FillPlayFabServerUnlockContainerInstanceRequest( PlayFab::ServerModels::UnlockContainerInstanceRequest* request );
    static HRESULT LogPlayFabServerUnlockContainerItemResult( PlayFabServerUnlockContainerItemResult* result );
    static HRESULT ValidatePlayFabServerUnlockContainerItemResult( PlayFabServerUnlockContainerItemResult* result );
    static void LogPlayFabServerUnlockContainerItemRequest( PlayFab::ServerModels::UnlockContainerItemRequest* request, const char* testName );
    static void FillPlayFabServerUnlockContainerItemRequest( PlayFab::ServerModels::UnlockContainerItemRequest* request );
    static void LogPlayFabServerUpdateAvatarUrlRequest( PlayFab::ServerModels::UpdateAvatarUrlRequest* request, const char* testName );
    static void FillPlayFabServerUpdateAvatarUrlRequest( PlayFab::ServerModels::UpdateAvatarUrlRequest* request );
    static void LogPlayFabServerUpdateBansRequest( PlayFab::ServerModels::UpdateBansRequest* request, const char* testName );
    static void FillPlayFabServerUpdateBansRequest( PlayFab::ServerModels::UpdateBansRequest* request );
    static HRESULT LogPlayFabServerUpdateBansResult( PlayFabServerUpdateBansResult* result );
    static HRESULT ValidatePlayFabServerUpdateBansResult( PlayFabServerUpdateBansResult* result );
    static void LogPlayFabServerUpdateCharacterDataRequest( PlayFab::ServerModels::UpdateCharacterDataRequest* request, const char* testName );
    static void FillPlayFabServerUpdateCharacterDataRequest( PlayFab::ServerModels::UpdateCharacterDataRequest* request );
    static HRESULT LogPlayFabServerUpdateCharacterDataResult( PlayFabServerUpdateCharacterDataResult* result );
    static HRESULT ValidatePlayFabServerUpdateCharacterDataResult( PlayFabServerUpdateCharacterDataResult* result );
    static void LogPlayFabServerUpdateCharacterStatisticsRequest( PlayFab::ServerModels::UpdateCharacterStatisticsRequest* request, const char* testName );
    static void FillPlayFabServerUpdateCharacterStatisticsRequest( PlayFab::ServerModels::UpdateCharacterStatisticsRequest* request );
    static void LogPlayFabServerUpdatePlayerStatisticsRequest( PlayFab::ServerModels::UpdatePlayerStatisticsRequest* request, const char* testName );
    static void FillPlayFabServerUpdatePlayerStatisticsRequest( PlayFab::ServerModels::UpdatePlayerStatisticsRequest* request );
    static void LogPlayFabServerUpdateSharedGroupDataRequest( PlayFab::ServerModels::UpdateSharedGroupDataRequest* request, const char* testName );
    static void FillPlayFabServerUpdateSharedGroupDataRequest( PlayFab::ServerModels::UpdateSharedGroupDataRequest* request );
    static void LogPlayFabServerUpdateUserDataRequest( PlayFab::ServerModels::UpdateUserDataRequest* request, const char* testName );
    static void FillPlayFabServerUpdateUserDataRequest( PlayFab::ServerModels::UpdateUserDataRequest* request );
    static HRESULT LogPlayFabServerUpdateUserDataResult( PlayFabServerUpdateUserDataResult* result );
    static HRESULT ValidatePlayFabServerUpdateUserDataResult( PlayFabServerUpdateUserDataResult* result );
    static void LogPlayFabServerUpdateUserInternalDataRequest( PlayFab::ServerModels::UpdateUserInternalDataRequest* request, const char* testName );
    static void FillPlayFabServerUpdateUserInternalDataRequest( PlayFab::ServerModels::UpdateUserInternalDataRequest* request );
    static void LogPlayFabServerUpdateUserInventoryItemDataRequest( PlayFab::ServerModels::UpdateUserInventoryItemDataRequest* request, const char* testName );
    static void FillPlayFabServerUpdateUserInventoryItemDataRequest( PlayFab::ServerModels::UpdateUserInventoryItemDataRequest* request );
    static void LogPlayFabServerWriteServerCharacterEventRequest( PlayFab::ServerModels::WriteServerCharacterEventRequest* request, const char* testName );
    static void FillPlayFabServerWriteServerCharacterEventRequest( PlayFab::ServerModels::WriteServerCharacterEventRequest* request );
    static HRESULT LogPlayFabServerWriteEventResponse( PlayFabServerWriteEventResponse* result );
    static HRESULT ValidatePlayFabServerWriteEventResponse( PlayFabServerWriteEventResponse* result );
    static void LogPlayFabServerWriteServerPlayerEventRequest( PlayFab::ServerModels::WriteServerPlayerEventRequest* request, const char* testName );
    static void FillPlayFabServerWriteServerPlayerEventRequest( PlayFab::ServerModels::WriteServerPlayerEventRequest* request );
    static void LogPlayFabServerWriteTitleEventRequest( PlayFab::ServerModels::WriteTitleEventRequest* request, const char* testName );
    static void FillPlayFabServerWriteTitleEventRequest( PlayFab::ServerModels::WriteTitleEventRequest* request );


public:
    PlayFabStateHandle stateHandle{ nullptr };
    PlayFabEntityHandle entityHandle{ nullptr };
    PlayFabGetPlayerCombinedInfoResultPayload const* playerCombinedInfo{ nullptr };

    void ClassSetUp() override;
    void ClassTearDown() override;
    void SetUp(TestContext& testContext) override;

    void Tick(TestContext&) override {}
};

}
