#pragma once

#include "TestCase.h"
#include <playfab/PlayFabGlobal.h>
#include <playfab/PlayFabEntity.h>
#include <playfab/PlayFabClientDataModels.h>
#include "../../../code/source/Client/MultiplayerDataModels.h"

namespace PlayFabUnit
{

class AutoGenMultiplayerTests : public PlayFabApiTestCase
{
private: 
    static void Log(std::stringstream& ss);
    static HRESULT LogHR(HRESULT hr);
    void TestMultiplayerCancelAllMatchmakingTicketsForPlayer(TestContext& testContext); 
    void TestMultiplayerCancelAllServerBackfillTicketsForPlayer(TestContext& testContext); 
    void TestMultiplayerCancelMatchmakingTicket(TestContext& testContext); 
    void TestMultiplayerCancelServerBackfillTicket(TestContext& testContext); 
    void TestMultiplayerCreateBuildAlias(TestContext& testContext); 
    void TestMultiplayerCreateBuildWithCustomContainer(TestContext& testContext); 
    void TestMultiplayerCreateBuildWithManagedContainer(TestContext& testContext); 
    void TestMultiplayerCreateBuildWithProcessBasedServer(TestContext& testContext); 
    void TestMultiplayerCreateMatchmakingTicket(TestContext& testContext); 
    void TestMultiplayerCreateRemoteUser(TestContext& testContext); 
    void TestMultiplayerCreateServerBackfillTicket(TestContext& testContext); 
    void TestMultiplayerCreateServerMatchmakingTicket(TestContext& testContext); 
    void TestMultiplayerCreateTitleMultiplayerServersQuotaChange(TestContext& testContext); 
    void TestMultiplayerDeleteAsset(TestContext& testContext); 
    void TestMultiplayerDeleteBuild(TestContext& testContext); 
    void TestMultiplayerDeleteBuildAlias(TestContext& testContext); 
    void TestMultiplayerDeleteBuildRegion(TestContext& testContext); 
    void TestMultiplayerDeleteCertificate(TestContext& testContext); 
    void TestMultiplayerDeleteContainerImageRepository(TestContext& testContext); 
    void TestMultiplayerDeleteRemoteUser(TestContext& testContext); 
    void TestMultiplayerEnableMultiplayerServersForTitle(TestContext& testContext); 
    void TestMultiplayerGetAssetDownloadUrl(TestContext& testContext); 
    void TestMultiplayerGetAssetUploadUrl(TestContext& testContext); 
    void TestMultiplayerGetBuild(TestContext& testContext); 
    void TestMultiplayerGetBuildAlias(TestContext& testContext); 
    void TestMultiplayerGetContainerRegistryCredentials(TestContext& testContext); 
    void TestMultiplayerGetMatch(TestContext& testContext); 
    void TestMultiplayerGetMatchmakingTicket(TestContext& testContext); 
    void TestMultiplayerGetMultiplayerServerDetails(TestContext& testContext); 
    void TestMultiplayerGetMultiplayerServerLogs(TestContext& testContext); 
    void TestMultiplayerGetMultiplayerSessionLogsBySessionId(TestContext& testContext); 
    void TestMultiplayerGetQueueStatistics(TestContext& testContext); 
    void TestMultiplayerGetRemoteLoginEndpoint(TestContext& testContext); 
    void TestMultiplayerGetServerBackfillTicket(TestContext& testContext); 
    void TestMultiplayerGetTitleEnabledForMultiplayerServersStatus(TestContext& testContext); 
    void TestMultiplayerGetTitleMultiplayerServersQuotaChange(TestContext& testContext); 
    void TestMultiplayerGetTitleMultiplayerServersQuotas(TestContext& testContext); 
    void TestMultiplayerJoinMatchmakingTicket(TestContext& testContext); 
    void TestMultiplayerListArchivedMultiplayerServers(TestContext& testContext); 
    void TestMultiplayerListAssetSummaries(TestContext& testContext); 
    void TestMultiplayerListBuildAliases(TestContext& testContext); 
    void TestMultiplayerListBuildSummariesV2(TestContext& testContext); 
    void TestMultiplayerListCertificateSummaries(TestContext& testContext); 
    void TestMultiplayerListContainerImages(TestContext& testContext); 
    void TestMultiplayerListContainerImageTags(TestContext& testContext); 
    void TestMultiplayerListMatchmakingTicketsForPlayer(TestContext& testContext); 
    void TestMultiplayerListMultiplayerServers(TestContext& testContext); 
    void TestMultiplayerListPartyQosServers(TestContext& testContext); 
    void TestMultiplayerListQosServersForTitle(TestContext& testContext); 
    void TestMultiplayerListServerBackfillTicketsForPlayer(TestContext& testContext); 
    void TestMultiplayerListTitleMultiplayerServersQuotaChanges(TestContext& testContext); 
    void TestMultiplayerListVirtualMachineSummaries(TestContext& testContext); 
    void TestMultiplayerRequestMultiplayerServer(TestContext& testContext); 
    void TestMultiplayerRolloverContainerRegistryCredentials(TestContext& testContext); 
    void TestMultiplayerShutdownMultiplayerServer(TestContext& testContext); 
    void TestMultiplayerUntagContainerImage(TestContext& testContext); 
    void TestMultiplayerUpdateBuildAlias(TestContext& testContext); 
    void TestMultiplayerUpdateBuildName(TestContext& testContext); 
    void TestMultiplayerUpdateBuildRegion(TestContext& testContext); 
    void TestMultiplayerUpdateBuildRegions(TestContext& testContext); 
    void TestMultiplayerUploadCertificate(TestContext& testContext); 


protected:
    void AddTests();

    static void LogPlayFabMultiplayerCancelAllMatchmakingTicketsForPlayerRequest( PlayFab::MultiplayerModels::CancelAllMatchmakingTicketsForPlayerRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCancelAllMatchmakingTicketsForPlayerRequest( PlayFab::MultiplayerModels::CancelAllMatchmakingTicketsForPlayerRequest* request );
    static void LogPlayFabMultiplayerCancelAllServerBackfillTicketsForPlayerRequest( PlayFab::MultiplayerModels::CancelAllServerBackfillTicketsForPlayerRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCancelAllServerBackfillTicketsForPlayerRequest( PlayFab::MultiplayerModels::CancelAllServerBackfillTicketsForPlayerRequest* request );
    static void LogPlayFabMultiplayerCancelMatchmakingTicketRequest( PlayFab::MultiplayerModels::CancelMatchmakingTicketRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCancelMatchmakingTicketRequest( PlayFab::MultiplayerModels::CancelMatchmakingTicketRequest* request );
    static void LogPlayFabMultiplayerCancelServerBackfillTicketRequest( PlayFab::MultiplayerModels::CancelServerBackfillTicketRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCancelServerBackfillTicketRequest( PlayFab::MultiplayerModels::CancelServerBackfillTicketRequest* request );
    static void LogPlayFabMultiplayerCreateBuildAliasRequest( PlayFab::MultiplayerModels::CreateBuildAliasRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCreateBuildAliasRequest( PlayFab::MultiplayerModels::CreateBuildAliasRequest* request );
    static HRESULT LogPlayFabMultiplayerBuildAliasDetailsResponse( PlayFabMultiplayerBuildAliasDetailsResponse* result );
    static HRESULT ValidatePlayFabMultiplayerBuildAliasDetailsResponse( PlayFabMultiplayerBuildAliasDetailsResponse* result );
    static void LogPlayFabMultiplayerCreateBuildWithCustomContainerRequest( PlayFab::MultiplayerModels::CreateBuildWithCustomContainerRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCreateBuildWithCustomContainerRequest( PlayFab::MultiplayerModels::CreateBuildWithCustomContainerRequest* request );
    static HRESULT LogPlayFabMultiplayerCreateBuildWithCustomContainerResponse( PlayFabMultiplayerCreateBuildWithCustomContainerResponse* result );
    static HRESULT ValidatePlayFabMultiplayerCreateBuildWithCustomContainerResponse( PlayFabMultiplayerCreateBuildWithCustomContainerResponse* result );
    static void LogPlayFabMultiplayerCreateBuildWithManagedContainerRequest( PlayFab::MultiplayerModels::CreateBuildWithManagedContainerRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCreateBuildWithManagedContainerRequest( PlayFab::MultiplayerModels::CreateBuildWithManagedContainerRequest* request );
    static HRESULT LogPlayFabMultiplayerCreateBuildWithManagedContainerResponse( PlayFabMultiplayerCreateBuildWithManagedContainerResponse* result );
    static HRESULT ValidatePlayFabMultiplayerCreateBuildWithManagedContainerResponse( PlayFabMultiplayerCreateBuildWithManagedContainerResponse* result );
    static void LogPlayFabMultiplayerCreateBuildWithProcessBasedServerRequest( PlayFab::MultiplayerModels::CreateBuildWithProcessBasedServerRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCreateBuildWithProcessBasedServerRequest( PlayFab::MultiplayerModels::CreateBuildWithProcessBasedServerRequest* request );
    static HRESULT LogPlayFabMultiplayerCreateBuildWithProcessBasedServerResponse( PlayFabMultiplayerCreateBuildWithProcessBasedServerResponse* result );
    static HRESULT ValidatePlayFabMultiplayerCreateBuildWithProcessBasedServerResponse( PlayFabMultiplayerCreateBuildWithProcessBasedServerResponse* result );
    static void LogPlayFabMultiplayerCreateMatchmakingTicketRequest( PlayFab::MultiplayerModels::CreateMatchmakingTicketRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCreateMatchmakingTicketRequest( PlayFab::MultiplayerModels::CreateMatchmakingTicketRequest* request );
    static HRESULT LogPlayFabMultiplayerCreateMatchmakingTicketResult( PlayFabMultiplayerCreateMatchmakingTicketResult* result );
    static HRESULT ValidatePlayFabMultiplayerCreateMatchmakingTicketResult( PlayFabMultiplayerCreateMatchmakingTicketResult* result );
    static void LogPlayFabMultiplayerCreateRemoteUserRequest( PlayFab::MultiplayerModels::CreateRemoteUserRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCreateRemoteUserRequest( PlayFab::MultiplayerModels::CreateRemoteUserRequest* request );
    static HRESULT LogPlayFabMultiplayerCreateRemoteUserResponse( PlayFabMultiplayerCreateRemoteUserResponse* result );
    static HRESULT ValidatePlayFabMultiplayerCreateRemoteUserResponse( PlayFabMultiplayerCreateRemoteUserResponse* result );
    static void LogPlayFabMultiplayerCreateServerBackfillTicketRequest( PlayFab::MultiplayerModels::CreateServerBackfillTicketRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCreateServerBackfillTicketRequest( PlayFab::MultiplayerModels::CreateServerBackfillTicketRequest* request );
    static HRESULT LogPlayFabMultiplayerCreateServerBackfillTicketResult( PlayFabMultiplayerCreateServerBackfillTicketResult* result );
    static HRESULT ValidatePlayFabMultiplayerCreateServerBackfillTicketResult( PlayFabMultiplayerCreateServerBackfillTicketResult* result );
    static void LogPlayFabMultiplayerCreateServerMatchmakingTicketRequest( PlayFab::MultiplayerModels::CreateServerMatchmakingTicketRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCreateServerMatchmakingTicketRequest( PlayFab::MultiplayerModels::CreateServerMatchmakingTicketRequest* request );
    static void LogPlayFabMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest( PlayFab::MultiplayerModels::CreateTitleMultiplayerServersQuotaChangeRequest* request, const char* testName );
    static void FillPlayFabMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest( PlayFab::MultiplayerModels::CreateTitleMultiplayerServersQuotaChangeRequest* request );
    static HRESULT LogPlayFabMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse( PlayFabMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse* result );
    static HRESULT ValidatePlayFabMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse( PlayFabMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse* result );
    static void LogPlayFabMultiplayerDeleteAssetRequest( PlayFab::MultiplayerModels::DeleteAssetRequest* request, const char* testName );
    static void FillPlayFabMultiplayerDeleteAssetRequest( PlayFab::MultiplayerModels::DeleteAssetRequest* request );
    static void LogPlayFabMultiplayerDeleteBuildRequest( PlayFab::MultiplayerModels::DeleteBuildRequest* request, const char* testName );
    static void FillPlayFabMultiplayerDeleteBuildRequest( PlayFab::MultiplayerModels::DeleteBuildRequest* request );
    static void LogPlayFabMultiplayerDeleteBuildAliasRequest( PlayFab::MultiplayerModels::DeleteBuildAliasRequest* request, const char* testName );
    static void FillPlayFabMultiplayerDeleteBuildAliasRequest( PlayFab::MultiplayerModels::DeleteBuildAliasRequest* request );
    static void LogPlayFabMultiplayerDeleteBuildRegionRequest( PlayFab::MultiplayerModels::DeleteBuildRegionRequest* request, const char* testName );
    static void FillPlayFabMultiplayerDeleteBuildRegionRequest( PlayFab::MultiplayerModels::DeleteBuildRegionRequest* request );
    static void LogPlayFabMultiplayerDeleteCertificateRequest( PlayFab::MultiplayerModels::DeleteCertificateRequest* request, const char* testName );
    static void FillPlayFabMultiplayerDeleteCertificateRequest( PlayFab::MultiplayerModels::DeleteCertificateRequest* request );
    static void LogPlayFabMultiplayerDeleteContainerImageRequest( PlayFab::MultiplayerModels::DeleteContainerImageRequest* request, const char* testName );
    static void FillPlayFabMultiplayerDeleteContainerImageRequest( PlayFab::MultiplayerModels::DeleteContainerImageRequest* request );
    static void LogPlayFabMultiplayerDeleteRemoteUserRequest( PlayFab::MultiplayerModels::DeleteRemoteUserRequest* request, const char* testName );
    static void FillPlayFabMultiplayerDeleteRemoteUserRequest( PlayFab::MultiplayerModels::DeleteRemoteUserRequest* request );
    static void LogPlayFabMultiplayerEnableMultiplayerServersForTitleRequest( PlayFab::MultiplayerModels::EnableMultiplayerServersForTitleRequest* request, const char* testName );
    static void FillPlayFabMultiplayerEnableMultiplayerServersForTitleRequest( PlayFab::MultiplayerModels::EnableMultiplayerServersForTitleRequest* request );
    static HRESULT LogPlayFabMultiplayerEnableMultiplayerServersForTitleResponse( PlayFabMultiplayerEnableMultiplayerServersForTitleResponse* result );
    static HRESULT ValidatePlayFabMultiplayerEnableMultiplayerServersForTitleResponse( PlayFabMultiplayerEnableMultiplayerServersForTitleResponse* result );
    static void LogPlayFabMultiplayerGetAssetDownloadUrlRequest( PlayFab::MultiplayerModels::GetAssetDownloadUrlRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetAssetDownloadUrlRequest( PlayFab::MultiplayerModels::GetAssetDownloadUrlRequest* request );
    static HRESULT LogPlayFabMultiplayerGetAssetDownloadUrlResponse( PlayFabMultiplayerGetAssetDownloadUrlResponse* result );
    static HRESULT ValidatePlayFabMultiplayerGetAssetDownloadUrlResponse( PlayFabMultiplayerGetAssetDownloadUrlResponse* result );
    static void LogPlayFabMultiplayerGetAssetUploadUrlRequest( PlayFab::MultiplayerModels::GetAssetUploadUrlRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetAssetUploadUrlRequest( PlayFab::MultiplayerModels::GetAssetUploadUrlRequest* request );
    static HRESULT LogPlayFabMultiplayerGetAssetUploadUrlResponse( PlayFabMultiplayerGetAssetUploadUrlResponse* result );
    static HRESULT ValidatePlayFabMultiplayerGetAssetUploadUrlResponse( PlayFabMultiplayerGetAssetUploadUrlResponse* result );
    static void LogPlayFabMultiplayerGetBuildRequest( PlayFab::MultiplayerModels::GetBuildRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetBuildRequest( PlayFab::MultiplayerModels::GetBuildRequest* request );
    static HRESULT LogPlayFabMultiplayerGetBuildResponse( PlayFabMultiplayerGetBuildResponse* result );
    static HRESULT ValidatePlayFabMultiplayerGetBuildResponse( PlayFabMultiplayerGetBuildResponse* result );
    static void LogPlayFabMultiplayerGetBuildAliasRequest( PlayFab::MultiplayerModels::GetBuildAliasRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetBuildAliasRequest( PlayFab::MultiplayerModels::GetBuildAliasRequest* request );
    static void LogPlayFabMultiplayerGetContainerRegistryCredentialsRequest( PlayFab::MultiplayerModels::GetContainerRegistryCredentialsRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetContainerRegistryCredentialsRequest( PlayFab::MultiplayerModels::GetContainerRegistryCredentialsRequest* request );
    static HRESULT LogPlayFabMultiplayerGetContainerRegistryCredentialsResponse( PlayFabMultiplayerGetContainerRegistryCredentialsResponse* result );
    static HRESULT ValidatePlayFabMultiplayerGetContainerRegistryCredentialsResponse( PlayFabMultiplayerGetContainerRegistryCredentialsResponse* result );
    static void LogPlayFabMultiplayerGetMatchRequest( PlayFab::MultiplayerModels::GetMatchRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetMatchRequest( PlayFab::MultiplayerModels::GetMatchRequest* request );
    static HRESULT LogPlayFabMultiplayerGetMatchResult( PlayFabMultiplayerGetMatchResult* result );
    static HRESULT ValidatePlayFabMultiplayerGetMatchResult( PlayFabMultiplayerGetMatchResult* result );
    static void LogPlayFabMultiplayerGetMatchmakingTicketRequest( PlayFab::MultiplayerModels::GetMatchmakingTicketRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetMatchmakingTicketRequest( PlayFab::MultiplayerModels::GetMatchmakingTicketRequest* request );
    static HRESULT LogPlayFabMultiplayerGetMatchmakingTicketResult( PlayFabMultiplayerGetMatchmakingTicketResult* result );
    static HRESULT ValidatePlayFabMultiplayerGetMatchmakingTicketResult( PlayFabMultiplayerGetMatchmakingTicketResult* result );
    static void LogPlayFabMultiplayerGetMultiplayerServerDetailsRequest( PlayFab::MultiplayerModels::GetMultiplayerServerDetailsRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetMultiplayerServerDetailsRequest( PlayFab::MultiplayerModels::GetMultiplayerServerDetailsRequest* request );
    static HRESULT LogPlayFabMultiplayerGetMultiplayerServerDetailsResponse( PlayFabMultiplayerGetMultiplayerServerDetailsResponse* result );
    static HRESULT ValidatePlayFabMultiplayerGetMultiplayerServerDetailsResponse( PlayFabMultiplayerGetMultiplayerServerDetailsResponse* result );
    static void LogPlayFabMultiplayerGetMultiplayerServerLogsRequest( PlayFab::MultiplayerModels::GetMultiplayerServerLogsRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetMultiplayerServerLogsRequest( PlayFab::MultiplayerModels::GetMultiplayerServerLogsRequest* request );
    static HRESULT LogPlayFabMultiplayerGetMultiplayerServerLogsResponse( PlayFabMultiplayerGetMultiplayerServerLogsResponse* result );
    static HRESULT ValidatePlayFabMultiplayerGetMultiplayerServerLogsResponse( PlayFabMultiplayerGetMultiplayerServerLogsResponse* result );
    static void LogPlayFabMultiplayerGetMultiplayerSessionLogsBySessionIdRequest( PlayFab::MultiplayerModels::GetMultiplayerSessionLogsBySessionIdRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetMultiplayerSessionLogsBySessionIdRequest( PlayFab::MultiplayerModels::GetMultiplayerSessionLogsBySessionIdRequest* request );
    static void LogPlayFabMultiplayerGetQueueStatisticsRequest( PlayFab::MultiplayerModels::GetQueueStatisticsRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetQueueStatisticsRequest( PlayFab::MultiplayerModels::GetQueueStatisticsRequest* request );
    static HRESULT LogPlayFabMultiplayerGetQueueStatisticsResult( PlayFabMultiplayerGetQueueStatisticsResult* result );
    static HRESULT ValidatePlayFabMultiplayerGetQueueStatisticsResult( PlayFabMultiplayerGetQueueStatisticsResult* result );
    static void LogPlayFabMultiplayerGetRemoteLoginEndpointRequest( PlayFab::MultiplayerModels::GetRemoteLoginEndpointRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetRemoteLoginEndpointRequest( PlayFab::MultiplayerModels::GetRemoteLoginEndpointRequest* request );
    static HRESULT LogPlayFabMultiplayerGetRemoteLoginEndpointResponse( PlayFabMultiplayerGetRemoteLoginEndpointResponse* result );
    static HRESULT ValidatePlayFabMultiplayerGetRemoteLoginEndpointResponse( PlayFabMultiplayerGetRemoteLoginEndpointResponse* result );
    static void LogPlayFabMultiplayerGetServerBackfillTicketRequest( PlayFab::MultiplayerModels::GetServerBackfillTicketRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetServerBackfillTicketRequest( PlayFab::MultiplayerModels::GetServerBackfillTicketRequest* request );
    static HRESULT LogPlayFabMultiplayerGetServerBackfillTicketResult( PlayFabMultiplayerGetServerBackfillTicketResult* result );
    static HRESULT ValidatePlayFabMultiplayerGetServerBackfillTicketResult( PlayFabMultiplayerGetServerBackfillTicketResult* result );
    static void LogPlayFabMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest( PlayFab::MultiplayerModels::GetTitleEnabledForMultiplayerServersStatusRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest( PlayFab::MultiplayerModels::GetTitleEnabledForMultiplayerServersStatusRequest* request );
    static HRESULT LogPlayFabMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse( PlayFabMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse* result );
    static HRESULT ValidatePlayFabMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse( PlayFabMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse* result );
    static void LogPlayFabMultiplayerGetTitleMultiplayerServersQuotaChangeRequest( PlayFab::MultiplayerModels::GetTitleMultiplayerServersQuotaChangeRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetTitleMultiplayerServersQuotaChangeRequest( PlayFab::MultiplayerModels::GetTitleMultiplayerServersQuotaChangeRequest* request );
    static HRESULT LogPlayFabMultiplayerGetTitleMultiplayerServersQuotaChangeResponse( PlayFabMultiplayerGetTitleMultiplayerServersQuotaChangeResponse* result );
    static HRESULT ValidatePlayFabMultiplayerGetTitleMultiplayerServersQuotaChangeResponse( PlayFabMultiplayerGetTitleMultiplayerServersQuotaChangeResponse* result );
    static void LogPlayFabMultiplayerGetTitleMultiplayerServersQuotasRequest( PlayFab::MultiplayerModels::GetTitleMultiplayerServersQuotasRequest* request, const char* testName );
    static void FillPlayFabMultiplayerGetTitleMultiplayerServersQuotasRequest( PlayFab::MultiplayerModels::GetTitleMultiplayerServersQuotasRequest* request );
    static HRESULT LogPlayFabMultiplayerGetTitleMultiplayerServersQuotasResponse( PlayFabMultiplayerGetTitleMultiplayerServersQuotasResponse* result );
    static HRESULT ValidatePlayFabMultiplayerGetTitleMultiplayerServersQuotasResponse( PlayFabMultiplayerGetTitleMultiplayerServersQuotasResponse* result );
    static void LogPlayFabMultiplayerJoinMatchmakingTicketRequest( PlayFab::MultiplayerModels::JoinMatchmakingTicketRequest* request, const char* testName );
    static void FillPlayFabMultiplayerJoinMatchmakingTicketRequest( PlayFab::MultiplayerModels::JoinMatchmakingTicketRequest* request );
    static void LogPlayFabMultiplayerListMultiplayerServersRequest( PlayFab::MultiplayerModels::ListMultiplayerServersRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListMultiplayerServersRequest( PlayFab::MultiplayerModels::ListMultiplayerServersRequest* request );
    static HRESULT LogPlayFabMultiplayerListMultiplayerServersResponse( PlayFabMultiplayerListMultiplayerServersResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListMultiplayerServersResponse( PlayFabMultiplayerListMultiplayerServersResponse* result );
    static void LogPlayFabMultiplayerListAssetSummariesRequest( PlayFab::MultiplayerModels::ListAssetSummariesRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListAssetSummariesRequest( PlayFab::MultiplayerModels::ListAssetSummariesRequest* request );
    static HRESULT LogPlayFabMultiplayerListAssetSummariesResponse( PlayFabMultiplayerListAssetSummariesResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListAssetSummariesResponse( PlayFabMultiplayerListAssetSummariesResponse* result );
    static void LogPlayFabMultiplayerListBuildAliasesRequest( PlayFab::MultiplayerModels::ListBuildAliasesRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListBuildAliasesRequest( PlayFab::MultiplayerModels::ListBuildAliasesRequest* request );
    static HRESULT LogPlayFabMultiplayerListBuildAliasesResponse( PlayFabMultiplayerListBuildAliasesResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListBuildAliasesResponse( PlayFabMultiplayerListBuildAliasesResponse* result );
    static void LogPlayFabMultiplayerListBuildSummariesRequest( PlayFab::MultiplayerModels::ListBuildSummariesRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListBuildSummariesRequest( PlayFab::MultiplayerModels::ListBuildSummariesRequest* request );
    static HRESULT LogPlayFabMultiplayerListBuildSummariesResponse( PlayFabMultiplayerListBuildSummariesResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListBuildSummariesResponse( PlayFabMultiplayerListBuildSummariesResponse* result );
    static void LogPlayFabMultiplayerListCertificateSummariesRequest( PlayFab::MultiplayerModels::ListCertificateSummariesRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListCertificateSummariesRequest( PlayFab::MultiplayerModels::ListCertificateSummariesRequest* request );
    static HRESULT LogPlayFabMultiplayerListCertificateSummariesResponse( PlayFabMultiplayerListCertificateSummariesResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListCertificateSummariesResponse( PlayFabMultiplayerListCertificateSummariesResponse* result );
    static void LogPlayFabMultiplayerListContainerImagesRequest( PlayFab::MultiplayerModels::ListContainerImagesRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListContainerImagesRequest( PlayFab::MultiplayerModels::ListContainerImagesRequest* request );
    static HRESULT LogPlayFabMultiplayerListContainerImagesResponse( PlayFabMultiplayerListContainerImagesResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListContainerImagesResponse( PlayFabMultiplayerListContainerImagesResponse* result );
    static void LogPlayFabMultiplayerListContainerImageTagsRequest( PlayFab::MultiplayerModels::ListContainerImageTagsRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListContainerImageTagsRequest( PlayFab::MultiplayerModels::ListContainerImageTagsRequest* request );
    static HRESULT LogPlayFabMultiplayerListContainerImageTagsResponse( PlayFabMultiplayerListContainerImageTagsResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListContainerImageTagsResponse( PlayFabMultiplayerListContainerImageTagsResponse* result );
    static void LogPlayFabMultiplayerListMatchmakingTicketsForPlayerRequest( PlayFab::MultiplayerModels::ListMatchmakingTicketsForPlayerRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListMatchmakingTicketsForPlayerRequest( PlayFab::MultiplayerModels::ListMatchmakingTicketsForPlayerRequest* request );
    static HRESULT LogPlayFabMultiplayerListMatchmakingTicketsForPlayerResult( PlayFabMultiplayerListMatchmakingTicketsForPlayerResult* result );
    static HRESULT ValidatePlayFabMultiplayerListMatchmakingTicketsForPlayerResult( PlayFabMultiplayerListMatchmakingTicketsForPlayerResult* result );
    static void LogPlayFabMultiplayerListPartyQosServersRequest( PlayFab::MultiplayerModels::ListPartyQosServersRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListPartyQosServersRequest( PlayFab::MultiplayerModels::ListPartyQosServersRequest* request );
    static HRESULT LogPlayFabMultiplayerListPartyQosServersResponse( PlayFabMultiplayerListPartyQosServersResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListPartyQosServersResponse( PlayFabMultiplayerListPartyQosServersResponse* result );
    static void LogPlayFabMultiplayerListQosServersForTitleRequest( PlayFab::MultiplayerModels::ListQosServersForTitleRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListQosServersForTitleRequest( PlayFab::MultiplayerModels::ListQosServersForTitleRequest* request );
    static HRESULT LogPlayFabMultiplayerListQosServersForTitleResponse( PlayFabMultiplayerListQosServersForTitleResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListQosServersForTitleResponse( PlayFabMultiplayerListQosServersForTitleResponse* result );
    static void LogPlayFabMultiplayerListServerBackfillTicketsForPlayerRequest( PlayFab::MultiplayerModels::ListServerBackfillTicketsForPlayerRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListServerBackfillTicketsForPlayerRequest( PlayFab::MultiplayerModels::ListServerBackfillTicketsForPlayerRequest* request );
    static HRESULT LogPlayFabMultiplayerListServerBackfillTicketsForPlayerResult( PlayFabMultiplayerListServerBackfillTicketsForPlayerResult* result );
    static HRESULT ValidatePlayFabMultiplayerListServerBackfillTicketsForPlayerResult( PlayFabMultiplayerListServerBackfillTicketsForPlayerResult* result );
    static void LogPlayFabMultiplayerListTitleMultiplayerServersQuotaChangesRequest( PlayFab::MultiplayerModels::ListTitleMultiplayerServersQuotaChangesRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListTitleMultiplayerServersQuotaChangesRequest( PlayFab::MultiplayerModels::ListTitleMultiplayerServersQuotaChangesRequest* request );
    static HRESULT LogPlayFabMultiplayerListTitleMultiplayerServersQuotaChangesResponse( PlayFabMultiplayerListTitleMultiplayerServersQuotaChangesResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListTitleMultiplayerServersQuotaChangesResponse( PlayFabMultiplayerListTitleMultiplayerServersQuotaChangesResponse* result );
    static void LogPlayFabMultiplayerListVirtualMachineSummariesRequest( PlayFab::MultiplayerModels::ListVirtualMachineSummariesRequest* request, const char* testName );
    static void FillPlayFabMultiplayerListVirtualMachineSummariesRequest( PlayFab::MultiplayerModels::ListVirtualMachineSummariesRequest* request );
    static HRESULT LogPlayFabMultiplayerListVirtualMachineSummariesResponse( PlayFabMultiplayerListVirtualMachineSummariesResponse* result );
    static HRESULT ValidatePlayFabMultiplayerListVirtualMachineSummariesResponse( PlayFabMultiplayerListVirtualMachineSummariesResponse* result );
    static void LogPlayFabMultiplayerRequestMultiplayerServerRequest( PlayFab::MultiplayerModels::RequestMultiplayerServerRequest* request, const char* testName );
    static void FillPlayFabMultiplayerRequestMultiplayerServerRequest( PlayFab::MultiplayerModels::RequestMultiplayerServerRequest* request );
    static HRESULT LogPlayFabMultiplayerRequestMultiplayerServerResponse( PlayFabMultiplayerRequestMultiplayerServerResponse* result );
    static HRESULT ValidatePlayFabMultiplayerRequestMultiplayerServerResponse( PlayFabMultiplayerRequestMultiplayerServerResponse* result );
    static void LogPlayFabMultiplayerRolloverContainerRegistryCredentialsRequest( PlayFab::MultiplayerModels::RolloverContainerRegistryCredentialsRequest* request, const char* testName );
    static void FillPlayFabMultiplayerRolloverContainerRegistryCredentialsRequest( PlayFab::MultiplayerModels::RolloverContainerRegistryCredentialsRequest* request );
    static HRESULT LogPlayFabMultiplayerRolloverContainerRegistryCredentialsResponse( PlayFabMultiplayerRolloverContainerRegistryCredentialsResponse* result );
    static HRESULT ValidatePlayFabMultiplayerRolloverContainerRegistryCredentialsResponse( PlayFabMultiplayerRolloverContainerRegistryCredentialsResponse* result );
    static void LogPlayFabMultiplayerShutdownMultiplayerServerRequest( PlayFab::MultiplayerModels::ShutdownMultiplayerServerRequest* request, const char* testName );
    static void FillPlayFabMultiplayerShutdownMultiplayerServerRequest( PlayFab::MultiplayerModels::ShutdownMultiplayerServerRequest* request );
    static void LogPlayFabMultiplayerUntagContainerImageRequest( PlayFab::MultiplayerModels::UntagContainerImageRequest* request, const char* testName );
    static void FillPlayFabMultiplayerUntagContainerImageRequest( PlayFab::MultiplayerModels::UntagContainerImageRequest* request );
    static void LogPlayFabMultiplayerUpdateBuildAliasRequest( PlayFab::MultiplayerModels::UpdateBuildAliasRequest* request, const char* testName );
    static void FillPlayFabMultiplayerUpdateBuildAliasRequest( PlayFab::MultiplayerModels::UpdateBuildAliasRequest* request );
    static void LogPlayFabMultiplayerUpdateBuildNameRequest( PlayFab::MultiplayerModels::UpdateBuildNameRequest* request, const char* testName );
    static void FillPlayFabMultiplayerUpdateBuildNameRequest( PlayFab::MultiplayerModels::UpdateBuildNameRequest* request );
    static void LogPlayFabMultiplayerUpdateBuildRegionRequest( PlayFab::MultiplayerModels::UpdateBuildRegionRequest* request, const char* testName );
    static void FillPlayFabMultiplayerUpdateBuildRegionRequest( PlayFab::MultiplayerModels::UpdateBuildRegionRequest* request );
    static void LogPlayFabMultiplayerUpdateBuildRegionsRequest( PlayFab::MultiplayerModels::UpdateBuildRegionsRequest* request, const char* testName );
    static void FillPlayFabMultiplayerUpdateBuildRegionsRequest( PlayFab::MultiplayerModels::UpdateBuildRegionsRequest* request );
    static void LogPlayFabMultiplayerUploadCertificateRequest( PlayFab::MultiplayerModels::UploadCertificateRequest* request, const char* testName );
    static void FillPlayFabMultiplayerUploadCertificateRequest( PlayFab::MultiplayerModels::UploadCertificateRequest* request );


public:
    PlayFabStateHandle stateHandle{ nullptr };
    PlayFabEntityHandle entityHandle{ nullptr };
    PlayFabGetPlayerCombinedInfoResultPayload const* playerCombinedInfo{ nullptr };

    void ClassSetUp() override;
    void ClassTearDown() override;
    void SetUp(TestContext& testContext) override;

    void Tick(TestContext&) override {}
};

}
