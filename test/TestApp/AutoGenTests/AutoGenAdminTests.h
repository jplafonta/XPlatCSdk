#pragma once

#include "TestCase.h"
#include <playfab/PlayFabGlobal.h>
#include <playfab/PlayFabEntity.h>
#include <playfab/PlayFabClientDataModels.h>
#include "../../../code/source/Client/AdminDataModels.h"

namespace PlayFabUnit
{

class AutoGenAdminTests : public PlayFabApiTestCase
{
private: 
    static void Log(std::stringstream& ss);
    static HRESULT LogHR(HRESULT hr);
    void TestAdminAbortTaskInstance(TestContext& testContext); 
    void TestAdminAddLocalizedNews(TestContext& testContext); 
    void TestAdminAddNews(TestContext& testContext); 
    void TestAdminAddPlayerTag(TestContext& testContext); 
    void TestAdminAddServerBuild(TestContext& testContext); 
    void TestAdminAddUserVirtualCurrency(TestContext& testContext); 
    void TestAdminAddVirtualCurrencyTypes(TestContext& testContext); 
    void TestAdminBanUsers(TestContext& testContext); 
    void TestAdminCheckLimitedEditionItemAvailability(TestContext& testContext); 
    void TestAdminCreateActionsOnPlayersInSegmentTask(TestContext& testContext); 
    void TestAdminCreateCloudScriptTask(TestContext& testContext); 
    void TestAdminCreateInsightsScheduledScalingTask(TestContext& testContext); 
    void TestAdminCreateOpenIdConnection(TestContext& testContext); 
    void TestAdminCreatePlayerSharedSecret(TestContext& testContext); 
    void TestAdminCreatePlayerStatisticDefinition(TestContext& testContext); 
    void TestAdminCreateSegment(TestContext& testContext); 
    void TestAdminDeleteContent(TestContext& testContext); 
    void TestAdminDeleteMasterPlayerAccount(TestContext& testContext); 
    void TestAdminDeleteOpenIdConnection(TestContext& testContext); 
    void TestAdminDeletePlayer(TestContext& testContext); 
    void TestAdminDeletePlayerSharedSecret(TestContext& testContext); 
    void TestAdminDeleteSegment(TestContext& testContext); 
    void TestAdminDeleteStore(TestContext& testContext); 
    void TestAdminDeleteTask(TestContext& testContext); 
    void TestAdminDeleteTitle(TestContext& testContext); 
    void TestAdminDeleteTitleDataOverride(TestContext& testContext); 
    void TestAdminExportMasterPlayerData(TestContext& testContext); 
    void TestAdminGetActionsOnPlayersInSegmentTaskInstance(TestContext& testContext); 
    void TestAdminGetAllSegments(TestContext& testContext); 
    void TestAdminGetCatalogItems(TestContext& testContext); 
    void TestAdminGetCloudScriptRevision(TestContext& testContext); 
    void TestAdminGetCloudScriptTaskInstance(TestContext& testContext); 
    void TestAdminGetCloudScriptVersions(TestContext& testContext); 
    void TestAdminGetContentList(TestContext& testContext); 
    void TestAdminGetContentUploadUrl(TestContext& testContext); 
    void TestAdminGetDataReport(TestContext& testContext); 
    void TestAdminGetMatchmakerGameInfo(TestContext& testContext); 
    void TestAdminGetMatchmakerGameModes(TestContext& testContext); 
    void TestAdminGetPlayedTitleList(TestContext& testContext); 
    void TestAdminGetPlayerIdFromAuthToken(TestContext& testContext); 
    void TestAdminGetPlayerProfile(TestContext& testContext); 
    void TestAdminGetPlayerSegments(TestContext& testContext); 
    void TestAdminGetPlayerSharedSecrets(TestContext& testContext); 
    void TestAdminGetPlayersInSegment(TestContext& testContext); 
    void TestAdminGetPlayerStatisticDefinitions(TestContext& testContext); 
    void TestAdminGetPlayerStatisticVersions(TestContext& testContext); 
    void TestAdminGetPlayerTags(TestContext& testContext); 
    void TestAdminGetPolicy(TestContext& testContext); 
    void TestAdminGetPublisherData(TestContext& testContext); 
    void TestAdminGetRandomResultTables(TestContext& testContext); 
    void TestAdminGetSegments(TestContext& testContext); 
    void TestAdminGetServerBuildInfo(TestContext& testContext); 
    void TestAdminGetServerBuildUploadUrl(TestContext& testContext); 
    void TestAdminGetStoreItems(TestContext& testContext); 
    void TestAdminGetTaskInstances(TestContext& testContext); 
    void TestAdminGetTasks(TestContext& testContext); 
    void TestAdminGetTitleData(TestContext& testContext); 
    void TestAdminGetTitleInternalData(TestContext& testContext); 
    void TestAdminGetUserAccountInfo(TestContext& testContext); 
    void TestAdminGetUserBans(TestContext& testContext); 
    void TestAdminGetUserData(TestContext& testContext); 
    void TestAdminGetUserInternalData(TestContext& testContext); 
    void TestAdminGetUserInventory(TestContext& testContext); 
    void TestAdminGetUserPublisherData(TestContext& testContext); 
    void TestAdminGetUserPublisherInternalData(TestContext& testContext); 
    void TestAdminGetUserPublisherReadOnlyData(TestContext& testContext); 
    void TestAdminGetUserReadOnlyData(TestContext& testContext); 
    void TestAdminGrantItemsToUsers(TestContext& testContext); 
    void TestAdminIncrementLimitedEditionItemAvailability(TestContext& testContext); 
    void TestAdminIncrementPlayerStatisticVersion(TestContext& testContext); 
    void TestAdminListOpenIdConnection(TestContext& testContext); 
    void TestAdminListServerBuilds(TestContext& testContext); 
    void TestAdminListVirtualCurrencyTypes(TestContext& testContext); 
    void TestAdminModifyMatchmakerGameModes(TestContext& testContext); 
    void TestAdminModifyServerBuild(TestContext& testContext); 
    void TestAdminRefundPurchase(TestContext& testContext); 
    void TestAdminRemovePlayerTag(TestContext& testContext); 
    void TestAdminRemoveServerBuild(TestContext& testContext); 
    void TestAdminRemoveVirtualCurrencyTypes(TestContext& testContext); 
    void TestAdminResetCharacterStatistics(TestContext& testContext); 
    void TestAdminResetPassword(TestContext& testContext); 
    void TestAdminResetUserStatistics(TestContext& testContext); 
    void TestAdminResolvePurchaseDispute(TestContext& testContext); 
    void TestAdminRevokeAllBansForUser(TestContext& testContext); 
    void TestAdminRevokeBans(TestContext& testContext); 
    void TestAdminRevokeInventoryItem(TestContext& testContext); 
    void TestAdminRevokeInventoryItems(TestContext& testContext); 
    void TestAdminRunTask(TestContext& testContext); 
    void TestAdminSendAccountRecoveryEmail(TestContext& testContext); 
    void TestAdminSetCatalogItems(TestContext& testContext); 
    void TestAdminSetPlayerSecret(TestContext& testContext); 
    void TestAdminSetPublishedRevision(TestContext& testContext); 
    void TestAdminSetPublisherData(TestContext& testContext); 
    void TestAdminSetStoreItems(TestContext& testContext); 
    void TestAdminSetTitleData(TestContext& testContext); 
    void TestAdminSetTitleDataAndOverrides(TestContext& testContext); 
    void TestAdminSetTitleInternalData(TestContext& testContext); 
    void TestAdminSetupPushNotification(TestContext& testContext); 
    void TestAdminSubtractUserVirtualCurrency(TestContext& testContext); 
    void TestAdminUpdateBans(TestContext& testContext); 
    void TestAdminUpdateCatalogItems(TestContext& testContext); 
    void TestAdminUpdateCloudScript(TestContext& testContext); 
    void TestAdminUpdateOpenIdConnection(TestContext& testContext); 
    void TestAdminUpdatePlayerSharedSecret(TestContext& testContext); 
    void TestAdminUpdatePlayerStatisticDefinition(TestContext& testContext); 
    void TestAdminUpdatePolicy(TestContext& testContext); 
    void TestAdminUpdateRandomResultTables(TestContext& testContext); 
    void TestAdminUpdateSegment(TestContext& testContext); 
    void TestAdminUpdateStoreItems(TestContext& testContext); 
    void TestAdminUpdateTask(TestContext& testContext); 
    void TestAdminUpdateUserData(TestContext& testContext); 
    void TestAdminUpdateUserInternalData(TestContext& testContext); 
    void TestAdminUpdateUserPublisherData(TestContext& testContext); 
    void TestAdminUpdateUserPublisherInternalData(TestContext& testContext); 
    void TestAdminUpdateUserPublisherReadOnlyData(TestContext& testContext); 
    void TestAdminUpdateUserReadOnlyData(TestContext& testContext); 
    void TestAdminUpdateUserTitleDisplayName(TestContext& testContext); 


protected:
    void AddTests();

    static void LogPlayFabAdminAbortTaskInstanceRequest( PlayFab::AdminModels::AbortTaskInstanceRequest* request, const char* testName );
    static void FillPlayFabAdminAbortTaskInstanceRequest( PlayFab::AdminModels::AbortTaskInstanceRequest* request );
    static void LogPlayFabAdminAddLocalizedNewsRequest( PlayFab::AdminModels::AddLocalizedNewsRequest* request, const char* testName );
    static void FillPlayFabAdminAddLocalizedNewsRequest( PlayFab::AdminModels::AddLocalizedNewsRequest* request );
    static void LogPlayFabAdminAddNewsRequest( PlayFab::AdminModels::AddNewsRequest* request, const char* testName );
    static void FillPlayFabAdminAddNewsRequest( PlayFab::AdminModels::AddNewsRequest* request );
    static HRESULT LogPlayFabAdminAddNewsResult( PlayFabAdminAddNewsResult* result );
    static HRESULT ValidatePlayFabAdminAddNewsResult( PlayFabAdminAddNewsResult* result );
    static void LogPlayFabAdminAddPlayerTagRequest( PlayFab::AdminModels::AddPlayerTagRequest* request, const char* testName );
    static void FillPlayFabAdminAddPlayerTagRequest( PlayFab::AdminModels::AddPlayerTagRequest* request );
    static void LogPlayFabAdminAddServerBuildRequest( PlayFab::AdminModels::AddServerBuildRequest* request, const char* testName );
    static void FillPlayFabAdminAddServerBuildRequest( PlayFab::AdminModels::AddServerBuildRequest* request );
    static HRESULT LogPlayFabAdminAddServerBuildResult( PlayFabAdminAddServerBuildResult* result );
    static HRESULT ValidatePlayFabAdminAddServerBuildResult( PlayFabAdminAddServerBuildResult* result );
    static void LogPlayFabAdminAddUserVirtualCurrencyRequest( PlayFab::AdminModels::AddUserVirtualCurrencyRequest* request, const char* testName );
    static void FillPlayFabAdminAddUserVirtualCurrencyRequest( PlayFab::AdminModels::AddUserVirtualCurrencyRequest* request );
    static HRESULT LogPlayFabAdminModifyUserVirtualCurrencyResult( PlayFabAdminModifyUserVirtualCurrencyResult* result );
    static HRESULT ValidatePlayFabAdminModifyUserVirtualCurrencyResult( PlayFabAdminModifyUserVirtualCurrencyResult* result );
    static void LogPlayFabAdminAddVirtualCurrencyTypesRequest( PlayFab::AdminModels::AddVirtualCurrencyTypesRequest* request, const char* testName );
    static void FillPlayFabAdminAddVirtualCurrencyTypesRequest( PlayFab::AdminModels::AddVirtualCurrencyTypesRequest* request );
    static void LogPlayFabAdminBanUsersRequest( PlayFab::AdminModels::BanUsersRequest* request, const char* testName );
    static void FillPlayFabAdminBanUsersRequest( PlayFab::AdminModels::BanUsersRequest* request );
    static HRESULT LogPlayFabAdminBanUsersResult( PlayFabAdminBanUsersResult* result );
    static HRESULT ValidatePlayFabAdminBanUsersResult( PlayFabAdminBanUsersResult* result );
    static void LogPlayFabAdminCheckLimitedEditionItemAvailabilityRequest( PlayFab::AdminModels::CheckLimitedEditionItemAvailabilityRequest* request, const char* testName );
    static void FillPlayFabAdminCheckLimitedEditionItemAvailabilityRequest( PlayFab::AdminModels::CheckLimitedEditionItemAvailabilityRequest* request );
    static HRESULT LogPlayFabAdminCheckLimitedEditionItemAvailabilityResult( PlayFabAdminCheckLimitedEditionItemAvailabilityResult* result );
    static HRESULT ValidatePlayFabAdminCheckLimitedEditionItemAvailabilityResult( PlayFabAdminCheckLimitedEditionItemAvailabilityResult* result );
    static void LogPlayFabAdminCreateActionsOnPlayerSegmentTaskRequest( PlayFab::AdminModels::CreateActionsOnPlayerSegmentTaskRequest* request, const char* testName );
    static void FillPlayFabAdminCreateActionsOnPlayerSegmentTaskRequest( PlayFab::AdminModels::CreateActionsOnPlayerSegmentTaskRequest* request );
    static HRESULT LogPlayFabAdminCreateTaskResult( PlayFabAdminCreateTaskResult* result );
    static HRESULT ValidatePlayFabAdminCreateTaskResult( PlayFabAdminCreateTaskResult* result );
    static void LogPlayFabAdminCreateCloudScriptTaskRequest( PlayFab::AdminModels::CreateCloudScriptTaskRequest* request, const char* testName );
    static void FillPlayFabAdminCreateCloudScriptTaskRequest( PlayFab::AdminModels::CreateCloudScriptTaskRequest* request );
    static void LogPlayFabAdminCreateInsightsScheduledScalingTaskRequest( PlayFab::AdminModels::CreateInsightsScheduledScalingTaskRequest* request, const char* testName );
    static void FillPlayFabAdminCreateInsightsScheduledScalingTaskRequest( PlayFab::AdminModels::CreateInsightsScheduledScalingTaskRequest* request );
    static void LogPlayFabAdminCreateOpenIdConnectionRequest( PlayFab::AdminModels::CreateOpenIdConnectionRequest* request, const char* testName );
    static void FillPlayFabAdminCreateOpenIdConnectionRequest( PlayFab::AdminModels::CreateOpenIdConnectionRequest* request );
    static void LogPlayFabAdminCreatePlayerSharedSecretRequest( PlayFab::AdminModels::CreatePlayerSharedSecretRequest* request, const char* testName );
    static void FillPlayFabAdminCreatePlayerSharedSecretRequest( PlayFab::AdminModels::CreatePlayerSharedSecretRequest* request );
    static HRESULT LogPlayFabAdminCreatePlayerSharedSecretResult( PlayFabAdminCreatePlayerSharedSecretResult* result );
    static HRESULT ValidatePlayFabAdminCreatePlayerSharedSecretResult( PlayFabAdminCreatePlayerSharedSecretResult* result );
    static void LogPlayFabAdminCreatePlayerStatisticDefinitionRequest( PlayFab::AdminModels::CreatePlayerStatisticDefinitionRequest* request, const char* testName );
    static void FillPlayFabAdminCreatePlayerStatisticDefinitionRequest( PlayFab::AdminModels::CreatePlayerStatisticDefinitionRequest* request );
    static HRESULT LogPlayFabAdminCreatePlayerStatisticDefinitionResult( PlayFabAdminCreatePlayerStatisticDefinitionResult* result );
    static HRESULT ValidatePlayFabAdminCreatePlayerStatisticDefinitionResult( PlayFabAdminCreatePlayerStatisticDefinitionResult* result );
    static void LogPlayFabAdminCreateSegmentRequest( PlayFab::AdminModels::CreateSegmentRequest* request, const char* testName );
    static void FillPlayFabAdminCreateSegmentRequest( PlayFab::AdminModels::CreateSegmentRequest* request );
    static HRESULT LogPlayFabAdminCreateSegmentResponse( PlayFabAdminCreateSegmentResponse* result );
    static HRESULT ValidatePlayFabAdminCreateSegmentResponse( PlayFabAdminCreateSegmentResponse* result );
    static void LogPlayFabAdminDeleteContentRequest( PlayFab::AdminModels::DeleteContentRequest* request, const char* testName );
    static void FillPlayFabAdminDeleteContentRequest( PlayFab::AdminModels::DeleteContentRequest* request );
    static void LogPlayFabAdminDeleteMasterPlayerAccountRequest( PlayFab::AdminModels::DeleteMasterPlayerAccountRequest* request, const char* testName );
    static void FillPlayFabAdminDeleteMasterPlayerAccountRequest( PlayFab::AdminModels::DeleteMasterPlayerAccountRequest* request );
    static HRESULT LogPlayFabAdminDeleteMasterPlayerAccountResult( PlayFabAdminDeleteMasterPlayerAccountResult* result );
    static HRESULT ValidatePlayFabAdminDeleteMasterPlayerAccountResult( PlayFabAdminDeleteMasterPlayerAccountResult* result );
    static void LogPlayFabAdminDeleteOpenIdConnectionRequest( PlayFab::AdminModels::DeleteOpenIdConnectionRequest* request, const char* testName );
    static void FillPlayFabAdminDeleteOpenIdConnectionRequest( PlayFab::AdminModels::DeleteOpenIdConnectionRequest* request );
    static void LogPlayFabAdminDeletePlayerRequest( PlayFab::AdminModels::DeletePlayerRequest* request, const char* testName );
    static void FillPlayFabAdminDeletePlayerRequest( PlayFab::AdminModels::DeletePlayerRequest* request );
    static void LogPlayFabAdminDeletePlayerSharedSecretRequest( PlayFab::AdminModels::DeletePlayerSharedSecretRequest* request, const char* testName );
    static void FillPlayFabAdminDeletePlayerSharedSecretRequest( PlayFab::AdminModels::DeletePlayerSharedSecretRequest* request );
    static void LogPlayFabAdminDeleteSegmentRequest( PlayFab::AdminModels::DeleteSegmentRequest* request, const char* testName );
    static void FillPlayFabAdminDeleteSegmentRequest( PlayFab::AdminModels::DeleteSegmentRequest* request );
    static HRESULT LogPlayFabAdminDeleteSegmentsResponse( PlayFabAdminDeleteSegmentsResponse* result );
    static HRESULT ValidatePlayFabAdminDeleteSegmentsResponse( PlayFabAdminDeleteSegmentsResponse* result );
    static void LogPlayFabAdminDeleteStoreRequest( PlayFab::AdminModels::DeleteStoreRequest* request, const char* testName );
    static void FillPlayFabAdminDeleteStoreRequest( PlayFab::AdminModels::DeleteStoreRequest* request );
    static void LogPlayFabAdminDeleteTaskRequest( PlayFab::AdminModels::DeleteTaskRequest* request, const char* testName );
    static void FillPlayFabAdminDeleteTaskRequest( PlayFab::AdminModels::DeleteTaskRequest* request );
    static void LogPlayFabAdminDeleteTitleDataOverrideRequest( PlayFab::AdminModels::DeleteTitleDataOverrideRequest* request, const char* testName );
    static void FillPlayFabAdminDeleteTitleDataOverrideRequest( PlayFab::AdminModels::DeleteTitleDataOverrideRequest* request );
    static void LogPlayFabAdminExportMasterPlayerDataRequest( PlayFab::AdminModels::ExportMasterPlayerDataRequest* request, const char* testName );
    static void FillPlayFabAdminExportMasterPlayerDataRequest( PlayFab::AdminModels::ExportMasterPlayerDataRequest* request );
    static HRESULT LogPlayFabAdminExportMasterPlayerDataResult( PlayFabAdminExportMasterPlayerDataResult* result );
    static HRESULT ValidatePlayFabAdminExportMasterPlayerDataResult( PlayFabAdminExportMasterPlayerDataResult* result );
    static void LogPlayFabAdminGetTaskInstanceRequest( PlayFab::AdminModels::GetTaskInstanceRequest* request, const char* testName );
    static void FillPlayFabAdminGetTaskInstanceRequest( PlayFab::AdminModels::GetTaskInstanceRequest* request );
    static HRESULT LogPlayFabAdminGetActionsOnPlayersInSegmentTaskInstanceResult( PlayFabAdminGetActionsOnPlayersInSegmentTaskInstanceResult* result );
    static HRESULT ValidatePlayFabAdminGetActionsOnPlayersInSegmentTaskInstanceResult( PlayFabAdminGetActionsOnPlayersInSegmentTaskInstanceResult* result );
    static HRESULT LogPlayFabAdminGetAllSegmentsResult( PlayFabAdminGetAllSegmentsResult* result );
    static HRESULT ValidatePlayFabAdminGetAllSegmentsResult( PlayFabAdminGetAllSegmentsResult* result );
    static void LogPlayFabAdminGetCatalogItemsRequest( PlayFab::AdminModels::GetCatalogItemsRequest* request, const char* testName );
    static void FillPlayFabAdminGetCatalogItemsRequest( PlayFab::AdminModels::GetCatalogItemsRequest* request );
    static HRESULT LogPlayFabAdminGetCatalogItemsResult( PlayFabAdminGetCatalogItemsResult* result );
    static HRESULT ValidatePlayFabAdminGetCatalogItemsResult( PlayFabAdminGetCatalogItemsResult* result );
    static void LogPlayFabAdminGetCloudScriptRevisionRequest( PlayFab::AdminModels::GetCloudScriptRevisionRequest* request, const char* testName );
    static void FillPlayFabAdminGetCloudScriptRevisionRequest( PlayFab::AdminModels::GetCloudScriptRevisionRequest* request );
    static HRESULT LogPlayFabAdminGetCloudScriptRevisionResult( PlayFabAdminGetCloudScriptRevisionResult* result );
    static HRESULT ValidatePlayFabAdminGetCloudScriptRevisionResult( PlayFabAdminGetCloudScriptRevisionResult* result );
    static HRESULT LogPlayFabAdminGetCloudScriptTaskInstanceResult( PlayFabAdminGetCloudScriptTaskInstanceResult* result );
    static HRESULT ValidatePlayFabAdminGetCloudScriptTaskInstanceResult( PlayFabAdminGetCloudScriptTaskInstanceResult* result );
    static HRESULT LogPlayFabAdminGetCloudScriptVersionsResult( PlayFabAdminGetCloudScriptVersionsResult* result );
    static HRESULT ValidatePlayFabAdminGetCloudScriptVersionsResult( PlayFabAdminGetCloudScriptVersionsResult* result );
    static void LogPlayFabAdminGetContentListRequest( PlayFab::AdminModels::GetContentListRequest* request, const char* testName );
    static void FillPlayFabAdminGetContentListRequest( PlayFab::AdminModels::GetContentListRequest* request );
    static HRESULT LogPlayFabAdminGetContentListResult( PlayFabAdminGetContentListResult* result );
    static HRESULT ValidatePlayFabAdminGetContentListResult( PlayFabAdminGetContentListResult* result );
    static void LogPlayFabAdminGetContentUploadUrlRequest( PlayFab::AdminModels::GetContentUploadUrlRequest* request, const char* testName );
    static void FillPlayFabAdminGetContentUploadUrlRequest( PlayFab::AdminModels::GetContentUploadUrlRequest* request );
    static HRESULT LogPlayFabAdminGetContentUploadUrlResult( PlayFabAdminGetContentUploadUrlResult* result );
    static HRESULT ValidatePlayFabAdminGetContentUploadUrlResult( PlayFabAdminGetContentUploadUrlResult* result );
    static void LogPlayFabAdminGetDataReportRequest( PlayFab::AdminModels::GetDataReportRequest* request, const char* testName );
    static void FillPlayFabAdminGetDataReportRequest( PlayFab::AdminModels::GetDataReportRequest* request );
    static HRESULT LogPlayFabAdminGetDataReportResult( PlayFabAdminGetDataReportResult* result );
    static HRESULT ValidatePlayFabAdminGetDataReportResult( PlayFabAdminGetDataReportResult* result );
    static void LogPlayFabAdminGetMatchmakerGameInfoRequest( PlayFab::AdminModels::GetMatchmakerGameInfoRequest* request, const char* testName );
    static void FillPlayFabAdminGetMatchmakerGameInfoRequest( PlayFab::AdminModels::GetMatchmakerGameInfoRequest* request );
    static HRESULT LogPlayFabAdminGetMatchmakerGameInfoResult( PlayFabAdminGetMatchmakerGameInfoResult* result );
    static HRESULT ValidatePlayFabAdminGetMatchmakerGameInfoResult( PlayFabAdminGetMatchmakerGameInfoResult* result );
    static void LogPlayFabAdminGetMatchmakerGameModesRequest( PlayFab::AdminModels::GetMatchmakerGameModesRequest* request, const char* testName );
    static void FillPlayFabAdminGetMatchmakerGameModesRequest( PlayFab::AdminModels::GetMatchmakerGameModesRequest* request );
    static HRESULT LogPlayFabAdminGetMatchmakerGameModesResult( PlayFabAdminGetMatchmakerGameModesResult* result );
    static HRESULT ValidatePlayFabAdminGetMatchmakerGameModesResult( PlayFabAdminGetMatchmakerGameModesResult* result );
    static void LogPlayFabAdminGetPlayedTitleListRequest( PlayFab::AdminModels::GetPlayedTitleListRequest* request, const char* testName );
    static void FillPlayFabAdminGetPlayedTitleListRequest( PlayFab::AdminModels::GetPlayedTitleListRequest* request );
    static HRESULT LogPlayFabAdminGetPlayedTitleListResult( PlayFabAdminGetPlayedTitleListResult* result );
    static HRESULT ValidatePlayFabAdminGetPlayedTitleListResult( PlayFabAdminGetPlayedTitleListResult* result );
    static void LogPlayFabAdminGetPlayerIdFromAuthTokenRequest( PlayFab::AdminModels::GetPlayerIdFromAuthTokenRequest* request, const char* testName );
    static void FillPlayFabAdminGetPlayerIdFromAuthTokenRequest( PlayFab::AdminModels::GetPlayerIdFromAuthTokenRequest* request );
    static HRESULT LogPlayFabAdminGetPlayerIdFromAuthTokenResult( PlayFabAdminGetPlayerIdFromAuthTokenResult* result );
    static HRESULT ValidatePlayFabAdminGetPlayerIdFromAuthTokenResult( PlayFabAdminGetPlayerIdFromAuthTokenResult* result );
    static void LogPlayFabAdminGetPlayerProfileRequest( PlayFab::AdminModels::GetPlayerProfileRequest* request, const char* testName );
    static void FillPlayFabAdminGetPlayerProfileRequest( PlayFab::AdminModels::GetPlayerProfileRequest* request );
    static HRESULT LogPlayFabAdminGetPlayerProfileResult( PlayFabAdminGetPlayerProfileResult* result );
    static HRESULT ValidatePlayFabAdminGetPlayerProfileResult( PlayFabAdminGetPlayerProfileResult* result );
    static void LogPlayFabAdminGetPlayersSegmentsRequest( PlayFab::AdminModels::GetPlayersSegmentsRequest* request, const char* testName );
    static void FillPlayFabAdminGetPlayersSegmentsRequest( PlayFab::AdminModels::GetPlayersSegmentsRequest* request );
    static HRESULT LogPlayFabAdminGetPlayerSegmentsResult( PlayFabAdminGetPlayerSegmentsResult* result );
    static HRESULT ValidatePlayFabAdminGetPlayerSegmentsResult( PlayFabAdminGetPlayerSegmentsResult* result );
    static HRESULT LogPlayFabAdminGetPlayerSharedSecretsResult( PlayFabAdminGetPlayerSharedSecretsResult* result );
    static HRESULT ValidatePlayFabAdminGetPlayerSharedSecretsResult( PlayFabAdminGetPlayerSharedSecretsResult* result );
    static void LogPlayFabAdminGetPlayersInSegmentRequest( PlayFab::AdminModels::GetPlayersInSegmentRequest* request, const char* testName );
    static void FillPlayFabAdminGetPlayersInSegmentRequest( PlayFab::AdminModels::GetPlayersInSegmentRequest* request );
    static HRESULT LogPlayFabAdminGetPlayersInSegmentResult( PlayFabAdminGetPlayersInSegmentResult* result );
    static HRESULT ValidatePlayFabAdminGetPlayersInSegmentResult( PlayFabAdminGetPlayersInSegmentResult* result );
    static HRESULT LogPlayFabAdminGetPlayerStatisticDefinitionsResult( PlayFabAdminGetPlayerStatisticDefinitionsResult* result );
    static HRESULT ValidatePlayFabAdminGetPlayerStatisticDefinitionsResult( PlayFabAdminGetPlayerStatisticDefinitionsResult* result );
    static void LogPlayFabAdminGetPlayerStatisticVersionsRequest( PlayFab::AdminModels::GetPlayerStatisticVersionsRequest* request, const char* testName );
    static void FillPlayFabAdminGetPlayerStatisticVersionsRequest( PlayFab::AdminModels::GetPlayerStatisticVersionsRequest* request );
    static HRESULT LogPlayFabAdminGetPlayerStatisticVersionsResult( PlayFabAdminGetPlayerStatisticVersionsResult* result );
    static HRESULT ValidatePlayFabAdminGetPlayerStatisticVersionsResult( PlayFabAdminGetPlayerStatisticVersionsResult* result );
    static void LogPlayFabAdminGetPlayerTagsRequest( PlayFab::AdminModels::GetPlayerTagsRequest* request, const char* testName );
    static void FillPlayFabAdminGetPlayerTagsRequest( PlayFab::AdminModels::GetPlayerTagsRequest* request );
    static HRESULT LogPlayFabAdminGetPlayerTagsResult( PlayFabAdminGetPlayerTagsResult* result );
    static HRESULT ValidatePlayFabAdminGetPlayerTagsResult( PlayFabAdminGetPlayerTagsResult* result );
    static void LogPlayFabAdminGetPolicyRequest( PlayFab::AdminModels::GetPolicyRequest* request, const char* testName );
    static void FillPlayFabAdminGetPolicyRequest( PlayFab::AdminModels::GetPolicyRequest* request );
    static HRESULT LogPlayFabAdminGetPolicyResponse( PlayFabAdminGetPolicyResponse* result );
    static HRESULT ValidatePlayFabAdminGetPolicyResponse( PlayFabAdminGetPolicyResponse* result );
    static void LogPlayFabAdminGetPublisherDataRequest( PlayFab::AdminModels::GetPublisherDataRequest* request, const char* testName );
    static void FillPlayFabAdminGetPublisherDataRequest( PlayFab::AdminModels::GetPublisherDataRequest* request );
    static HRESULT LogPlayFabAdminGetPublisherDataResult( PlayFabAdminGetPublisherDataResult* result );
    static HRESULT ValidatePlayFabAdminGetPublisherDataResult( PlayFabAdminGetPublisherDataResult* result );
    static void LogPlayFabAdminGetRandomResultTablesRequest( PlayFab::AdminModels::GetRandomResultTablesRequest* request, const char* testName );
    static void FillPlayFabAdminGetRandomResultTablesRequest( PlayFab::AdminModels::GetRandomResultTablesRequest* request );
    static HRESULT LogPlayFabAdminGetRandomResultTablesResult( PlayFabAdminGetRandomResultTablesResult* result );
    static HRESULT ValidatePlayFabAdminGetRandomResultTablesResult( PlayFabAdminGetRandomResultTablesResult* result );
    static void LogPlayFabAdminGetSegmentsRequest( PlayFab::AdminModels::GetSegmentsRequest* request, const char* testName );
    static void FillPlayFabAdminGetSegmentsRequest( PlayFab::AdminModels::GetSegmentsRequest* request );
    static HRESULT LogPlayFabAdminGetSegmentsResponse( PlayFabAdminGetSegmentsResponse* result );
    static HRESULT ValidatePlayFabAdminGetSegmentsResponse( PlayFabAdminGetSegmentsResponse* result );
    static void LogPlayFabAdminGetServerBuildInfoRequest( PlayFab::AdminModels::GetServerBuildInfoRequest* request, const char* testName );
    static void FillPlayFabAdminGetServerBuildInfoRequest( PlayFab::AdminModels::GetServerBuildInfoRequest* request );
    static HRESULT LogPlayFabAdminGetServerBuildInfoResult( PlayFabAdminGetServerBuildInfoResult* result );
    static HRESULT ValidatePlayFabAdminGetServerBuildInfoResult( PlayFabAdminGetServerBuildInfoResult* result );
    static void LogPlayFabAdminGetServerBuildUploadURLRequest( PlayFab::AdminModels::GetServerBuildUploadURLRequest* request, const char* testName );
    static void FillPlayFabAdminGetServerBuildUploadURLRequest( PlayFab::AdminModels::GetServerBuildUploadURLRequest* request );
    static HRESULT LogPlayFabAdminGetServerBuildUploadURLResult( PlayFabAdminGetServerBuildUploadURLResult* result );
    static HRESULT ValidatePlayFabAdminGetServerBuildUploadURLResult( PlayFabAdminGetServerBuildUploadURLResult* result );
    static void LogPlayFabAdminGetStoreItemsRequest( PlayFab::AdminModels::GetStoreItemsRequest* request, const char* testName );
    static void FillPlayFabAdminGetStoreItemsRequest( PlayFab::AdminModels::GetStoreItemsRequest* request );
    static HRESULT LogPlayFabAdminGetStoreItemsResult( PlayFabAdminGetStoreItemsResult* result );
    static HRESULT ValidatePlayFabAdminGetStoreItemsResult( PlayFabAdminGetStoreItemsResult* result );
    static void LogPlayFabAdminGetTaskInstancesRequest( PlayFab::AdminModels::GetTaskInstancesRequest* request, const char* testName );
    static void FillPlayFabAdminGetTaskInstancesRequest( PlayFab::AdminModels::GetTaskInstancesRequest* request );
    static HRESULT LogPlayFabAdminGetTaskInstancesResult( PlayFabAdminGetTaskInstancesResult* result );
    static HRESULT ValidatePlayFabAdminGetTaskInstancesResult( PlayFabAdminGetTaskInstancesResult* result );
    static void LogPlayFabAdminGetTasksRequest( PlayFab::AdminModels::GetTasksRequest* request, const char* testName );
    static void FillPlayFabAdminGetTasksRequest( PlayFab::AdminModels::GetTasksRequest* request );
    static HRESULT LogPlayFabAdminGetTasksResult( PlayFabAdminGetTasksResult* result );
    static HRESULT ValidatePlayFabAdminGetTasksResult( PlayFabAdminGetTasksResult* result );
    static void LogPlayFabAdminGetTitleDataRequest( PlayFab::AdminModels::GetTitleDataRequest* request, const char* testName );
    static void FillPlayFabAdminGetTitleDataRequest( PlayFab::AdminModels::GetTitleDataRequest* request );
    static HRESULT LogPlayFabAdminGetTitleDataResult( PlayFabAdminGetTitleDataResult* result );
    static HRESULT ValidatePlayFabAdminGetTitleDataResult( PlayFabAdminGetTitleDataResult* result );
    static void LogPlayFabAdminLookupUserAccountInfoRequest( PlayFab::AdminModels::LookupUserAccountInfoRequest* request, const char* testName );
    static void FillPlayFabAdminLookupUserAccountInfoRequest( PlayFab::AdminModels::LookupUserAccountInfoRequest* request );
    static HRESULT LogPlayFabAdminLookupUserAccountInfoResult( PlayFabAdminLookupUserAccountInfoResult* result );
    static HRESULT ValidatePlayFabAdminLookupUserAccountInfoResult( PlayFabAdminLookupUserAccountInfoResult* result );
    static void LogPlayFabAdminGetUserBansRequest( PlayFab::AdminModels::GetUserBansRequest* request, const char* testName );
    static void FillPlayFabAdminGetUserBansRequest( PlayFab::AdminModels::GetUserBansRequest* request );
    static HRESULT LogPlayFabAdminGetUserBansResult( PlayFabAdminGetUserBansResult* result );
    static HRESULT ValidatePlayFabAdminGetUserBansResult( PlayFabAdminGetUserBansResult* result );
    static void LogPlayFabAdminGetUserDataRequest( PlayFab::AdminModels::GetUserDataRequest* request, const char* testName );
    static void FillPlayFabAdminGetUserDataRequest( PlayFab::AdminModels::GetUserDataRequest* request );
    static HRESULT LogPlayFabAdminGetUserDataResult( PlayFabAdminGetUserDataResult* result );
    static HRESULT ValidatePlayFabAdminGetUserDataResult( PlayFabAdminGetUserDataResult* result );
    static void LogPlayFabAdminGetUserInventoryRequest( PlayFab::AdminModels::GetUserInventoryRequest* request, const char* testName );
    static void FillPlayFabAdminGetUserInventoryRequest( PlayFab::AdminModels::GetUserInventoryRequest* request );
    static HRESULT LogPlayFabAdminGetUserInventoryResult( PlayFabAdminGetUserInventoryResult* result );
    static HRESULT ValidatePlayFabAdminGetUserInventoryResult( PlayFabAdminGetUserInventoryResult* result );
    static void LogPlayFabAdminGrantItemsToUsersRequest( PlayFab::AdminModels::GrantItemsToUsersRequest* request, const char* testName );
    static void FillPlayFabAdminGrantItemsToUsersRequest( PlayFab::AdminModels::GrantItemsToUsersRequest* request );
    static HRESULT LogPlayFabAdminGrantItemsToUsersResult( PlayFabAdminGrantItemsToUsersResult* result );
    static HRESULT ValidatePlayFabAdminGrantItemsToUsersResult( PlayFabAdminGrantItemsToUsersResult* result );
    static void LogPlayFabAdminIncrementLimitedEditionItemAvailabilityRequest( PlayFab::AdminModels::IncrementLimitedEditionItemAvailabilityRequest* request, const char* testName );
    static void FillPlayFabAdminIncrementLimitedEditionItemAvailabilityRequest( PlayFab::AdminModels::IncrementLimitedEditionItemAvailabilityRequest* request );
    static void LogPlayFabAdminIncrementPlayerStatisticVersionRequest( PlayFab::AdminModels::IncrementPlayerStatisticVersionRequest* request, const char* testName );
    static void FillPlayFabAdminIncrementPlayerStatisticVersionRequest( PlayFab::AdminModels::IncrementPlayerStatisticVersionRequest* request );
    static HRESULT LogPlayFabAdminIncrementPlayerStatisticVersionResult( PlayFabAdminIncrementPlayerStatisticVersionResult* result );
    static HRESULT ValidatePlayFabAdminIncrementPlayerStatisticVersionResult( PlayFabAdminIncrementPlayerStatisticVersionResult* result );
    static HRESULT LogPlayFabAdminListOpenIdConnectionResponse( PlayFabAdminListOpenIdConnectionResponse* result );
    static HRESULT ValidatePlayFabAdminListOpenIdConnectionResponse( PlayFabAdminListOpenIdConnectionResponse* result );
    static HRESULT LogPlayFabAdminListBuildsResult( PlayFabAdminListBuildsResult* result );
    static HRESULT ValidatePlayFabAdminListBuildsResult( PlayFabAdminListBuildsResult* result );
    static HRESULT LogPlayFabAdminListVirtualCurrencyTypesResult( PlayFabAdminListVirtualCurrencyTypesResult* result );
    static HRESULT ValidatePlayFabAdminListVirtualCurrencyTypesResult( PlayFabAdminListVirtualCurrencyTypesResult* result );
    static void LogPlayFabAdminModifyMatchmakerGameModesRequest( PlayFab::AdminModels::ModifyMatchmakerGameModesRequest* request, const char* testName );
    static void FillPlayFabAdminModifyMatchmakerGameModesRequest( PlayFab::AdminModels::ModifyMatchmakerGameModesRequest* request );
    static void LogPlayFabAdminModifyServerBuildRequest( PlayFab::AdminModels::ModifyServerBuildRequest* request, const char* testName );
    static void FillPlayFabAdminModifyServerBuildRequest( PlayFab::AdminModels::ModifyServerBuildRequest* request );
    static HRESULT LogPlayFabAdminModifyServerBuildResult( PlayFabAdminModifyServerBuildResult* result );
    static HRESULT ValidatePlayFabAdminModifyServerBuildResult( PlayFabAdminModifyServerBuildResult* result );
    static void LogPlayFabAdminRefundPurchaseRequest( PlayFab::AdminModels::RefundPurchaseRequest* request, const char* testName );
    static void FillPlayFabAdminRefundPurchaseRequest( PlayFab::AdminModels::RefundPurchaseRequest* request );
    static HRESULT LogPlayFabAdminRefundPurchaseResponse( PlayFabAdminRefundPurchaseResponse* result );
    static HRESULT ValidatePlayFabAdminRefundPurchaseResponse( PlayFabAdminRefundPurchaseResponse* result );
    static void LogPlayFabAdminRemovePlayerTagRequest( PlayFab::AdminModels::RemovePlayerTagRequest* request, const char* testName );
    static void FillPlayFabAdminRemovePlayerTagRequest( PlayFab::AdminModels::RemovePlayerTagRequest* request );
    static void LogPlayFabAdminRemoveServerBuildRequest( PlayFab::AdminModels::RemoveServerBuildRequest* request, const char* testName );
    static void FillPlayFabAdminRemoveServerBuildRequest( PlayFab::AdminModels::RemoveServerBuildRequest* request );
    static void LogPlayFabAdminRemoveVirtualCurrencyTypesRequest( PlayFab::AdminModels::RemoveVirtualCurrencyTypesRequest* request, const char* testName );
    static void FillPlayFabAdminRemoveVirtualCurrencyTypesRequest( PlayFab::AdminModels::RemoveVirtualCurrencyTypesRequest* request );
    static void LogPlayFabAdminResetCharacterStatisticsRequest( PlayFab::AdminModels::ResetCharacterStatisticsRequest* request, const char* testName );
    static void FillPlayFabAdminResetCharacterStatisticsRequest( PlayFab::AdminModels::ResetCharacterStatisticsRequest* request );
    static void LogPlayFabAdminResetPasswordRequest( PlayFab::AdminModels::ResetPasswordRequest* request, const char* testName );
    static void FillPlayFabAdminResetPasswordRequest( PlayFab::AdminModels::ResetPasswordRequest* request );
    static void LogPlayFabAdminResetUserStatisticsRequest( PlayFab::AdminModels::ResetUserStatisticsRequest* request, const char* testName );
    static void FillPlayFabAdminResetUserStatisticsRequest( PlayFab::AdminModels::ResetUserStatisticsRequest* request );
    static void LogPlayFabAdminResolvePurchaseDisputeRequest( PlayFab::AdminModels::ResolvePurchaseDisputeRequest* request, const char* testName );
    static void FillPlayFabAdminResolvePurchaseDisputeRequest( PlayFab::AdminModels::ResolvePurchaseDisputeRequest* request );
    static HRESULT LogPlayFabAdminResolvePurchaseDisputeResponse( PlayFabAdminResolvePurchaseDisputeResponse* result );
    static HRESULT ValidatePlayFabAdminResolvePurchaseDisputeResponse( PlayFabAdminResolvePurchaseDisputeResponse* result );
    static void LogPlayFabAdminRevokeAllBansForUserRequest( PlayFab::AdminModels::RevokeAllBansForUserRequest* request, const char* testName );
    static void FillPlayFabAdminRevokeAllBansForUserRequest( PlayFab::AdminModels::RevokeAllBansForUserRequest* request );
    static HRESULT LogPlayFabAdminRevokeAllBansForUserResult( PlayFabAdminRevokeAllBansForUserResult* result );
    static HRESULT ValidatePlayFabAdminRevokeAllBansForUserResult( PlayFabAdminRevokeAllBansForUserResult* result );
    static void LogPlayFabAdminRevokeBansRequest( PlayFab::AdminModels::RevokeBansRequest* request, const char* testName );
    static void FillPlayFabAdminRevokeBansRequest( PlayFab::AdminModels::RevokeBansRequest* request );
    static HRESULT LogPlayFabAdminRevokeBansResult( PlayFabAdminRevokeBansResult* result );
    static HRESULT ValidatePlayFabAdminRevokeBansResult( PlayFabAdminRevokeBansResult* result );
    static void LogPlayFabAdminRevokeInventoryItemRequest( PlayFab::AdminModels::RevokeInventoryItemRequest* request, const char* testName );
    static void FillPlayFabAdminRevokeInventoryItemRequest( PlayFab::AdminModels::RevokeInventoryItemRequest* request );
    static void LogPlayFabAdminRevokeInventoryItemsRequest( PlayFab::AdminModels::RevokeInventoryItemsRequest* request, const char* testName );
    static void FillPlayFabAdminRevokeInventoryItemsRequest( PlayFab::AdminModels::RevokeInventoryItemsRequest* request );
    static HRESULT LogPlayFabAdminRevokeInventoryItemsResult( PlayFabAdminRevokeInventoryItemsResult* result );
    static HRESULT ValidatePlayFabAdminRevokeInventoryItemsResult( PlayFabAdminRevokeInventoryItemsResult* result );
    static void LogPlayFabAdminRunTaskRequest( PlayFab::AdminModels::RunTaskRequest* request, const char* testName );
    static void FillPlayFabAdminRunTaskRequest( PlayFab::AdminModels::RunTaskRequest* request );
    static HRESULT LogPlayFabAdminRunTaskResult( PlayFabAdminRunTaskResult* result );
    static HRESULT ValidatePlayFabAdminRunTaskResult( PlayFabAdminRunTaskResult* result );
    static void LogPlayFabAdminSendAccountRecoveryEmailRequest( PlayFab::AdminModels::SendAccountRecoveryEmailRequest* request, const char* testName );
    static void FillPlayFabAdminSendAccountRecoveryEmailRequest( PlayFab::AdminModels::SendAccountRecoveryEmailRequest* request );
    static void LogPlayFabAdminUpdateCatalogItemsRequest( PlayFab::AdminModels::UpdateCatalogItemsRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateCatalogItemsRequest( PlayFab::AdminModels::UpdateCatalogItemsRequest* request );
    static void LogPlayFabAdminSetPlayerSecretRequest( PlayFab::AdminModels::SetPlayerSecretRequest* request, const char* testName );
    static void FillPlayFabAdminSetPlayerSecretRequest( PlayFab::AdminModels::SetPlayerSecretRequest* request );
    static void LogPlayFabAdminSetPublishedRevisionRequest( PlayFab::AdminModels::SetPublishedRevisionRequest* request, const char* testName );
    static void FillPlayFabAdminSetPublishedRevisionRequest( PlayFab::AdminModels::SetPublishedRevisionRequest* request );
    static void LogPlayFabAdminSetPublisherDataRequest( PlayFab::AdminModels::SetPublisherDataRequest* request, const char* testName );
    static void FillPlayFabAdminSetPublisherDataRequest( PlayFab::AdminModels::SetPublisherDataRequest* request );
    static void LogPlayFabAdminUpdateStoreItemsRequest( PlayFab::AdminModels::UpdateStoreItemsRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateStoreItemsRequest( PlayFab::AdminModels::UpdateStoreItemsRequest* request );
    static void LogPlayFabAdminSetTitleDataRequest( PlayFab::AdminModels::SetTitleDataRequest* request, const char* testName );
    static void FillPlayFabAdminSetTitleDataRequest( PlayFab::AdminModels::SetTitleDataRequest* request );
    static void LogPlayFabAdminSetTitleDataAndOverridesRequest( PlayFab::AdminModels::SetTitleDataAndOverridesRequest* request, const char* testName );
    static void FillPlayFabAdminSetTitleDataAndOverridesRequest( PlayFab::AdminModels::SetTitleDataAndOverridesRequest* request );
    static void LogPlayFabAdminSetupPushNotificationRequest( PlayFab::AdminModels::SetupPushNotificationRequest* request, const char* testName );
    static void FillPlayFabAdminSetupPushNotificationRequest( PlayFab::AdminModels::SetupPushNotificationRequest* request );
    static HRESULT LogPlayFabAdminSetupPushNotificationResult( PlayFabAdminSetupPushNotificationResult* result );
    static HRESULT ValidatePlayFabAdminSetupPushNotificationResult( PlayFabAdminSetupPushNotificationResult* result );
    static void LogPlayFabAdminSubtractUserVirtualCurrencyRequest( PlayFab::AdminModels::SubtractUserVirtualCurrencyRequest* request, const char* testName );
    static void FillPlayFabAdminSubtractUserVirtualCurrencyRequest( PlayFab::AdminModels::SubtractUserVirtualCurrencyRequest* request );
    static void LogPlayFabAdminUpdateBansRequest( PlayFab::AdminModels::UpdateBansRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateBansRequest( PlayFab::AdminModels::UpdateBansRequest* request );
    static HRESULT LogPlayFabAdminUpdateBansResult( PlayFabAdminUpdateBansResult* result );
    static HRESULT ValidatePlayFabAdminUpdateBansResult( PlayFabAdminUpdateBansResult* result );
    static void LogPlayFabAdminUpdateCloudScriptRequest( PlayFab::AdminModels::UpdateCloudScriptRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateCloudScriptRequest( PlayFab::AdminModels::UpdateCloudScriptRequest* request );
    static HRESULT LogPlayFabAdminUpdateCloudScriptResult( PlayFabAdminUpdateCloudScriptResult* result );
    static HRESULT ValidatePlayFabAdminUpdateCloudScriptResult( PlayFabAdminUpdateCloudScriptResult* result );
    static void LogPlayFabAdminUpdateOpenIdConnectionRequest( PlayFab::AdminModels::UpdateOpenIdConnectionRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateOpenIdConnectionRequest( PlayFab::AdminModels::UpdateOpenIdConnectionRequest* request );
    static void LogPlayFabAdminUpdatePlayerSharedSecretRequest( PlayFab::AdminModels::UpdatePlayerSharedSecretRequest* request, const char* testName );
    static void FillPlayFabAdminUpdatePlayerSharedSecretRequest( PlayFab::AdminModels::UpdatePlayerSharedSecretRequest* request );
    static void LogPlayFabAdminUpdatePlayerStatisticDefinitionRequest( PlayFab::AdminModels::UpdatePlayerStatisticDefinitionRequest* request, const char* testName );
    static void FillPlayFabAdminUpdatePlayerStatisticDefinitionRequest( PlayFab::AdminModels::UpdatePlayerStatisticDefinitionRequest* request );
    static HRESULT LogPlayFabAdminUpdatePlayerStatisticDefinitionResult( PlayFabAdminUpdatePlayerStatisticDefinitionResult* result );
    static HRESULT ValidatePlayFabAdminUpdatePlayerStatisticDefinitionResult( PlayFabAdminUpdatePlayerStatisticDefinitionResult* result );
    static void LogPlayFabAdminUpdatePolicyRequest( PlayFab::AdminModels::UpdatePolicyRequest* request, const char* testName );
    static void FillPlayFabAdminUpdatePolicyRequest( PlayFab::AdminModels::UpdatePolicyRequest* request );
    static HRESULT LogPlayFabAdminUpdatePolicyResponse( PlayFabAdminUpdatePolicyResponse* result );
    static HRESULT ValidatePlayFabAdminUpdatePolicyResponse( PlayFabAdminUpdatePolicyResponse* result );
    static void LogPlayFabAdminUpdateRandomResultTablesRequest( PlayFab::AdminModels::UpdateRandomResultTablesRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateRandomResultTablesRequest( PlayFab::AdminModels::UpdateRandomResultTablesRequest* request );
    static void LogPlayFabAdminUpdateSegmentRequest( PlayFab::AdminModels::UpdateSegmentRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateSegmentRequest( PlayFab::AdminModels::UpdateSegmentRequest* request );
    static HRESULT LogPlayFabAdminUpdateSegmentResponse( PlayFabAdminUpdateSegmentResponse* result );
    static HRESULT ValidatePlayFabAdminUpdateSegmentResponse( PlayFabAdminUpdateSegmentResponse* result );
    static void LogPlayFabAdminUpdateTaskRequest( PlayFab::AdminModels::UpdateTaskRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateTaskRequest( PlayFab::AdminModels::UpdateTaskRequest* request );
    static void LogPlayFabAdminUpdateUserDataRequest( PlayFab::AdminModels::UpdateUserDataRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateUserDataRequest( PlayFab::AdminModels::UpdateUserDataRequest* request );
    static HRESULT LogPlayFabAdminUpdateUserDataResult( PlayFabAdminUpdateUserDataResult* result );
    static HRESULT ValidatePlayFabAdminUpdateUserDataResult( PlayFabAdminUpdateUserDataResult* result );
    static void LogPlayFabAdminUpdateUserInternalDataRequest( PlayFab::AdminModels::UpdateUserInternalDataRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateUserInternalDataRequest( PlayFab::AdminModels::UpdateUserInternalDataRequest* request );
    static void LogPlayFabAdminUpdateUserTitleDisplayNameRequest( PlayFab::AdminModels::UpdateUserTitleDisplayNameRequest* request, const char* testName );
    static void FillPlayFabAdminUpdateUserTitleDisplayNameRequest( PlayFab::AdminModels::UpdateUserTitleDisplayNameRequest* request );
    static HRESULT LogPlayFabAdminUpdateUserTitleDisplayNameResult( PlayFabAdminUpdateUserTitleDisplayNameResult* result );
    static HRESULT ValidatePlayFabAdminUpdateUserTitleDisplayNameResult( PlayFabAdminUpdateUserTitleDisplayNameResult* result );


public:
    PlayFabStateHandle stateHandle{ nullptr };
    PlayFabEntityHandle entityHandle{ nullptr };
    PlayFabGetPlayerCombinedInfoResultPayload const* playerCombinedInfo{ nullptr };

    void ClassSetUp() override;
    void ClassTearDown() override;
    void SetUp(TestContext& testContext) override;

    void Tick(TestContext&) override {}
};

}
